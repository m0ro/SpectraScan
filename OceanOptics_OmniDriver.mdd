<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <Copyright>Copyright 2012 The Mathworks, Inc.</Copyright>
   <FileVersion>2.42</FileVersion>
   <DriverName>OceanOptics_OmniDriver.mdd</DriverName>
   <DriverType>MATLAB generic</DriverType>
   <InstrumentType>Spectrometer</InstrumentType>
   <InstrumentManufacturer>Ocean Optics</InstrumentManufacturer>
   <InstrumentModel>QE65 Pro, Maya2000 Pro, Jaz EL350, HR2000, USB2000, USB4000, NIRQuest</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify>*IDN?</Identify>
   <Reset>*RST</Reset>
   <Selftest>*TST?</Selftest>
   <Error>System:Error?</Error>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

driverData = get(obj, 'DriverData');

try
    driverData.Wrapper = com.oceanoptics.omnidriver.api.wrapper.Wrapper();
    driverData.Coefficients = [];
    driverData.Detector = [];
    set(obj, 'DriverData', driverData);
catch aException
    error('instrument:oceanoptics:adpatorNotFound', 'OmniDriver was not found or could not be loaded. Possible reasons are javaclasspath.txt or classpath.txt is not configured properly to load OmniDriver.');
end
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

driverData = get(obj, 'DriverData');

numberOfSpectrometers = 0;
try
    numberOfSpectrometers = driverData.Wrapper.openAllSpectrometers();
     
catch aException
    error('instrument:oceanoptics:connectfailed', 'Unsuccessful connect: Cannot connect to the device. Possible reason is javalibrarypath.txt/librarypath.txt is not configured properly to load OmniDriver.');
end

if (numberOfSpectrometers == 0)
    error('instrument:oceanoptics:devicenotconnected', ' Spectrometer not found, Please make sure the spectrometer is connected properly.');
end</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT

driverData = get(obj, 'DriverData');

try
    driverData.Wrapper.closeAllSpectrometers();
catch aException
    error('instrument:oceanoptics:adpatorNotFound', 'OmniDriver was not found or could not be loaded. Possible reasons are javaclasspath.txt or classpath.txt is not configured properly to load OmniDriver.');
end</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>exportToGramsSPC</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = exportToGramsSPC(obj, spectrometerIndex, channelIndex, outputPathname, pixels, username)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.exportToGramsSPC(spectrometerIndex, channelIndex, outputPathname, pixels, username);
</MCode>
               </Code>
               <Description>Export the specified spectrum to a file in the GramsSPC format. 
The exported file will include the acquisition parameter settings in effect at the time of the call to this method. Therefore it is important that none of the acquisition parameters are changed between the time you call getSpectrum() to acquire the spectrum and the time you call this method. 

A timestamp will also be saved to the exported file. The timestamp will correspond to the moment you call this method. So again, it is important that you call this method fairly immediately after calling getSpectrum(). 

Units are assumed to be as follows: 
X: wavelengths, in nanometers 
Y: counts 


Parameters:
outputPathname - full pathname of the file to create. If this file already exists, we will over-write it.
pixels - array of double primitives constituting the spectrum
username - required for the GramsSPC format. 
Returns:
true if the file was successfully create. Returns false if an error occurred. If an error occurred, you may call getLastException() to obtain more information about the nature of the problem.
</Description>
            </Method>
            <Method>
               <Name>flushSpectrum</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = flushSpectrum(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.flushSpectrum(spectrometerIndex);</MCode>
               </Code>
               <Description>Tell the spectrometer to throw away an unwanted spectrum. 
CAUTION: Only call this method after a call to wrapper.getSpectrum() has timed out and you have called wrapper.sendSimulatedTriggerSignal(). Calling this method under any other circumstance will hang your application. 

When you call wrapper.getSpectrum() it sends a command to the spectrometer requesting the next available spectrum. Normally the spectrometer immediately sends this spectrum and your call to wrapper.getSpectrum() returns that spectrum. However, if the spectrometer has been placed in one of the hardware trigger modes, and no trigger signal has occurred, wrapper.getSpectrum() will return to your application (after the timeout interval has elapsed) without waiting to receive the requested spectrum. At this point, if your application calls sendSimulatedTriggerSignal(), the spectrometer will now generate a new spectrum, but your application is no longer waiting for it to arrive. Therefore it is necessary to call flushSpectrum() to effectively tell the spectrometer to throw the spectrum away. If you do not do this, the communications between the spectrometer and your application will get out of sync. 

As of February 2012, only the STS spectrometer supports this capability. 


Parameters:
spectrometerIndex - 
Returns:
boolean true if successful; return false if an error occurred (possible errors: IOException, or if you call this method for any spectrometer other than an STS)
</Description>
            </Method>
            <Method>
               <Name>getApiVersion</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getApiVersion(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getApiVersion());
</MCode>
               </Code>
               <Description>Gets the API version

            </Description>
            </Method>
            <Method>
               <Name>getBoxcarWidth</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getBoxcarWidth(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getBoxcarWidth(spectrometerIndex, channelIndex);

</MCode>
               </Code>
               <Description>Gets the Boxcat width.

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.

            </Description>
            </Method>
            <Method>
               <Name>getBuildNumber</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getBuildNumber(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getBuildNumber();
</MCode>
               </Code>
               <Description>Gets the build number</Description>
            </Method>
            <Method>
               <Name>getCalibrationCoefficientsFromBuffer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCalibrationCoefficientsFromBuffer(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Coefficients = driverData.Wrapper.getCalibrationCoefficientsFromBuffer(spectrometerIndex, channelIndex);
set(obj, 'DriverData', driverData);
returnValue = get(obj, 'Coefficients');</MCode>
               </Code>
               <Description>Return a copy of the calibration coefficients as currently stored in our internal buffer. These are the values which will be used for all spectral acquisitions on this spectrometer. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control. 
</Description>
            </Method>
            <Method>
               <Name>getCalibrationCoefficientsFromEEProm</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCalibrationCoefficientsFromEEProm(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Coefficients = driverData.Wrapper.getCalibrationCoefficientsFromEEProm(spectrometerIndex, channelIndex);
set(obj, 'DriverData', driverData);
returnValue = get(obj, 'Coefficients');</MCode>
               </Code>
               <Description>Refresh our internal buffer with the current calibration settings obtained directly from the spectrometer EEPROM. Then return a copy of these values. These are the values which will be used for all spectral acquisitions on this spectrometer. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control. 
Returns:
a Coefficients object containing all of the calibration coefficients
</Description>
            </Method>
            <Method>
               <Name>getCorrectForDetectorNonlinearity</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCorrectForDetectorNonlinearity(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getCorrectForDetectorNonlinearity(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getCorrectForElectricalDark</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCorrectForElectricalDark(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getCorrectForElectricalDark(spectrometerIndex);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getCorrectForStrayLight</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCorrectForStrayLight(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getCorrectForStrayLight(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getDetector</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDetector(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Detector = driverData.Wrapper.getDetector(spectrometerIndex, channelIndex);
set(obj, 'DriverData', driverData);
returnValue = get(obj, 'Detector');</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control. 
Returns:
the optical detector configuration information, or null if channelIndex is out of bounds.
</Description>
            </Method>
            <Method>
               <Name>getEEpromInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getEEpromInfo(obj, spectrometerIndex, slot)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getEEPromInfo(spectrometerIndex, slot));
</MCode>
               </Code>
               <Description>Returns:
Returns the requested spectrometer configuration variable. Returns null if an error occurred.
</Description>
            </Method>
            <Method>
               <Name>getExternalTriggerMode</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerMode(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getExternalTriggerMode(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Gets the external trigger mode of the spectrometer. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control. 
Returns:
the current setting of the external trigger mode. See setExternalTriggerMode(spectrometerIndex,mode) for a full description.
</Description>
            </Method>
            <Method>
               <Name>getFirmwareVersion</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getFirmwareVersion(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getFirmwareVersion(spectrometerIndex));
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
String the version of the FX2 firmware in the spectrometer, or the string "I/O error" if an I/O error occurred and we were unable to obtain the firmware version. 
The firmware version will look something like "1.01.11"
</Description>
            </Method>
            <Method>
               <Name>getIntegrationTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getIntegrationTime(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getIntegrationTime(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control. 
Returns:
current integration time setting, in units of microseconds.
</Description>
            </Method>
            <Method>
               <Name>getLastException</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLastException(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getLastException());
</MCode>
               </Code>
               <Description>Returns:
String a description of the most recent error exception, or "no exception" if no error has been encountered
</Description>
            </Method>
            <Method>
               <Name>getLastExceptionStackTrace</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLastExceptionStackTrace(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getLastExceptionStackTrace());
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getMaximumIntegrationTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getMaximumIntegrationTime(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getMaximumIntegrationTime(spectrometerIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
int the maximum allowed integration time, in microseconds
</Description>
            </Method>
            <Method>
               <Name>getMaximumIntensity</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getMaximumIntensity(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getMaximumIntensity(spectrometerIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
int the maximum possible value for a CCD pixel. Equivalent to the saturation point.
</Description>
            </Method>
            <Method>
               <Name>getMinimumIntegrationTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getMinimumIntegrationTime(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getMinimumIntegrationTime(spectrometerIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
int the minimum allowed integration time, in microseconds
</Description>
            </Method>
            <Method>
               <Name>getName</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getName(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getName(spectrometerIndex));
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
a String identifying the type of spectrometer
</Description>
            </Method>
            <Method>
               <Name>getNumberOfDarkPixels</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfDarkPixels(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getNumberOfDarkPixels(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer. 
Returns:
int the number of dark pixels provided by this spectrometer.
</Description>
            </Method>
            <Method>
               <Name>getNumberOfPixels</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfPixels(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getNumberOfPixels(spectrometerIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of that spectrometer. 
Returns:
int the total number of pixels (ie. CCD elements) provided by this spectrometer, including any dark or bevel (unused) pixels.
</Description>
            </Method>
            <Method>
               <Name>getNumberOfSpectrometersFound</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfSpectrometersFound(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getNumberOfSpectrometersFound();
</MCode>
               </Code>
               <Description>You must first call openAllSpectrometers() and/or openNetworkSpectrometer() 

Returns:
int number of spectrometers we discovered.
</Description>
            </Method>
            <Method>
               <Name>getScansToAverage</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getScansToAverage(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getScansToAverage(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
</Description>
            </Method>
            <Method>
               <Name>getSerialNumber</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSerialNumberNumber(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = char(driverData.Wrapper.getSerialNumber(spectrometerIndex));
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
String the serial number of the specified spectrometer, or "Not Found" if an I/O exception occured.
</Description>
            </Method>
            <Method>
               <Name>getSpectrum</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSpectrum(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getSpectrum(spectrometerIndex);
</MCode>
               </Code>
               <Description>Acquire the next available spectrum from the specified spectrometer. Any requested processing steps will already be applied to the returned spectrum (ie. boxcar averaging, electric dark correction, multi-scan averaging, etc.). 
After calling this method, you can call isSaturated(spectrometerIndex) to determine if the most recently acquired spectrum was saturated or not. 


Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of the selected spectrometer. 
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
Returns:
double[] the spectrum pixel values, after applying boxcar averaging, electric dark correction, etc.
</Description>
            </Method>
            <Method>
               <Name>getStrobeEnable</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getStrobeEnable(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getStrobeEnable(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of the selected spectrometer. 
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
Returns:
int 1 if strobe is enabled, 0 if strobe is not enabled
</Description>
            </Method>
            <Method>
               <Name>getWavelength</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWavelength(obj, spectrometerIndex, channelIndex, pixel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getWavelength(spectrometerIndex, channelIndex, pixel);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
pixel - (0-n) 0 corresponds to the shorter wavelength end of the spectrum 
Returns:
double the calculated wavelength value corresponding to the specified pixel in the acquired spectrum. Wavelength calibration coefficients have been applied to improve the accuracy of the returned value.
</Description>
            </Method>
            <Method>
               <Name>getWavelengths</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWavelengths(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.getWavelengths(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of the selected spectrometer. 
Returns:
double[] the calculated wavelength values corresponding to each pixel in the acquired spectrum. Wavelength calibration coefficients have been applied to improve the accuracy of the returned values. The formula for calculating wavelengths is as follows: 
w(x) = A + Bx +Cx**2 + Dx**3 
where 
x is pixel number (0-n) 
A is the calibration intercept (the value returned by the getWavelengthIntercept() method 
B is the first order calibration value (the value returned by the getWavelengthFirst() method 
C is the second order calibration value (the value returned by the getWavelengthSecond() method 
D is the third order calibration value (the value returned by the getWavelengthThird() method
</Description>
            </Method>
            <Method>
               <Name>insertKey</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function insertKey(obj, keyValue)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.insertKey(keyValue);
</MCode>
               </Code>
               <Description>Certain wrapper methods are restricted in their use due to the possibility that these methods may adversely and subtly affect the accurate operation of the spectrometer. Thus, in order to use these restricted methods, you must first call the insertKey() method, passing in the required "key" value. 
Note that when you enable these restricted operations by calling insertKey(), you are enabling these operations for ALL attached spectrometers. 

Examples of restricted methods: 

•setEEPromInfo() 
•setWavelengthCoefficientsIntoBuffer() 
•setWavelengthCoefficientsIntoEEProm() 

Parameters:
keyValue - this String is case-sensitive. The required key value for Ocean Optics customers is "Mat429sky" 
Returns:
true if key was successfully inserted, else false.
See Also:
removekey
</Description>
            </Method>
            <Method>
               <Name>isSaturated</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isSaturated(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.isSaturated(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>You must first call thet getSpectrum() method before calling this method for the same spectrometer. 
After calling getSpectrum(), you can call this method to determine if the most recently acquired spectrum was saturated or not. Be careful to specify the same spectrometerIndex value for both calls! 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.</Description>
            </Method>
            <Method>
               <Name>isSpectrumValid</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isSpectrumValid(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.isSpectrumValid(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>You must first call thet getSpectrum() method before calling this method for the same spectrometer. 
After calling getSpectrum(), you can call this method to determine if the most recently acquired spectrum is valid. Things which could result in an "invalid" spectrum are I/O errors, or physically unplugging the spectrometer. Be careful to specify the same spectrometerIndex value for both calls! 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
Returns:
true if the most recently acquired spectrum is valid.
</Description>
            </Method>
            <Method>
               <Name>isTimeout</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isTimeout(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.isTimeout(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>openNetworkSpectrometer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = openNetworkSpectrometer(obj, ipAddress)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.openNetworkSpectrometer(ipAddress);
</MCode>
               </Code>
               <Description>Call this method once for each JazNetwork device you wish to open. 
If you call this method twice for the same spectrometer/ipAddress, we will simply return the spectrometerIndex position of the existing opened spectrometer. 

Parameters:
ipAddress - an IP address like "192.168.21.1" 
Returns:
int the spectrometerIndex position of the newly opened spectrometer. If we were unable to open the specified network spectrometer, we will return -1, indicating an error.
</Description>
            </Method>
            <Method>
               <Name>removeKey</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function removeKey(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.removeKey();
</MCode>
               </Code>
               <Description>Disable restricted functions for all attached spectrometers. </Description>
            </Method>
            <Method>
               <Name>saveSTSConfiguration</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = saveSTSConfiguration(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.saveSTSConfiguration(spectrometerIndex);
</MCode>
               </Code>
               <Description>Gets the configuration description for the STS spectrometer. This is only available to Ocean Optics employees. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0. 
Returns:
the optical configuration information, or null if an IOException occurred.
</Description>
            </Method>
            <Method>
               <Name>selftest</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function selftest(obj)
%   SELFTEST Code for testing a MATLAB instrument driver.
%
%   This is the machine generated code that tests a MATLAB instrument driver.
%
%   The test consists of multiple test steps that can test the MATLAB instrument
%   drivers functions and properties.
%
%   The test code was generated with the MIDTEST GUI. For more information
%   on MIDTEST, type 'instrhelp midtest' at the MATLAB command prompt.
%
%   To run the test, type the name of the file, OmniDriverTest, at the MATLAB
%   command prompt.
%
%   The file, OMNIDRIVERTEST.M must be on your MATLAB PATH. For additional information
%   on setting your MATLAB PATH, type 'help addpath' at the MATLAB command
%   prompt.
%
%   Example:
%       omnidrivertest;
%
%   See also ICDEVICE, MIDTEST.
%

%   Creation time: 03-Oct-2012 08:03:16


% Wrap entire test in try catch.
try
    fprintf('Test: OmniDriver test\n');
    fprintf(['Start time: ' datestr(now) '\n']);
    
    % Initialize variables.
    varargout              = {};
    noErrorMsg             = '';
    stepWarningOccurred    = false;
    warningOccurred        = false;
    errorOccurred          = false;
    okToDeleteInterfaceObj = true;
    errorMsg = 'not supported by the connected device';
    
    % Test Step 1: Function Sweep (Function Sweep Test Step)
    finalerrorcode = false;
    
    % M-Lint warnings to be ignored:
    % Cell array concatenation warning:
    %#ok&lt;*CCAT&gt;
    % Unused variables warning:
    %#ok&lt;*NASGU&gt;
    
    %% EXPORTTOGRAMSSPC from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'exporttogramsspc',0,0,pwd,[0 0 0],'shreenat');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% FLUSHSPECTRUM from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'flushspectrum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETAPIVERSION from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getapiversion');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETBOXCARWIDTH from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getboxcarwidth',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETBUILDNUMBER from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getbuildnumber');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCALIBRATIONCOEFFICIENTSFROMBUFFER from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getcalibrationcoefficientsfrombuffer',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCALIBRATIONCOEFFICIENTSFROMEEPROM from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getcalibrationcoefficientsfromeeprom',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCORRECTFORDETECTORNONLINEARITY from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getcorrectfordetectornonlinearity',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCORRECTFORELECTRICALDARK from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getcorrectforelectricaldark',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCORRECTFORSTRAYLIGHT from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getcorrectforstraylight',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDETECTOR from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getdetector',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEEPROMINFO from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'geteeprominfo',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETERROR from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        msg = geterror(obj);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, msg };
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXTERNALTRIGGERMODE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getexternaltriggermode',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETFIRMWAREVERSION from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getfirmwareversion',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINTEGRATIONTIME from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getintegrationtime',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLASTEXCEPTION from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getlastexception');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLASTEXCEPTIONSTACKTRACE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getlastexceptionstacktrace');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETMAXIMUMINTEGRATIONTIME from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getmaximumintegrationtime',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETMAXIMUMINTENSITY from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getmaximumintensity',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETMINIMUMINTEGRATIONTIME from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getminimumintegrationtime',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNAME from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getname',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFDARKPIXELS from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getnumberofdarkpixels',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFPIXELS from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getnumberofpixels',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFSPECTROMETERSFOUND from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getnumberofspectrometersfound');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSCANSTOAVERAGE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getscanstoaverage',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSERIALNUMBER from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getserialnumber',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSPECTRUM from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getspectrum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSTROBEENABLE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getstrobeenable',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWAVELENGTH from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getwavelength',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWAVELENGTHS from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'getwavelengths',0, 0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% INSERTKEY from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'insertkey','Mat429sky');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISSATURATED from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'issaturated',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISSPECTRUMVALID from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'isspectrumvalid',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISTIMEOUT from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'istimeout',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% OPENNETWORKSPECTROMETER from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'opennetworkspectrometer','127.0.0.1');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% REMOVEKEY from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'removekey');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SAVESTSCONFIGURATION from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'savestsconfiguration',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SENDSIMULATEDTRIGGERSIGNAL from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'sendsimulatedtriggersignal',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETAUTOTOGGLESTROBELAMPENABLE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setautotogglestrobelampenable',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETBOXCARWIDTH from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setboxcarwidth',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCALIBRATIONCOEFFICIENTSINTOBUFFER from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'setCalibrationCoefficientsIntoBuffer',0,0,1,1,1);
    
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
    
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
    
    
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
    
    catch aException
        % A MATLAB error occurred.
        
    
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCALIBRATIONCOEFFICIENTSINTOEEPROM from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'setcalibrationcoefficientsintoeeprom',0,0,1,1,1);
    
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
    
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
    
    
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
    
    catch aException
        % A MATLAB error occurred.
        
    
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCORRECTFORDETECTORNONLINEARITY from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'setcorrectfordetectornonlinearity',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCORRECTFORELECTRICALDARK from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setcorrectforelectricaldark',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDETECTORSETPOINTCELSIUS from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setdetectorsetpointcelsius',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETEEPROMINFO from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'seteeprominfo',0,0,'some string');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETEXTERNALTRIGGERMODE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setexternaltriggermode',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETINTEGRATIONTIME from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        ;
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNETWORKCOMMUNICATIONPARAMETERS from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setnetworkcommunicationparameters',0,0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSCANSTOAVERAGE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setscanstoaverage',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSTROBEENABLE from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'setstrobeenable',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETTIMEOUT from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        [returnvalue] = invoke(obj,'settimeout',0, 10);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% STOPAVERAGING from group: PARENT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        invoke(obj,'stopaveraging',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETVOLTAGEIN from group: ANALOGIN
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogin');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getvoltagein',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ANALOGOUTCOUNTSTOVOLTS from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'analogoutcountstovolts',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACCOUNTS from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdaccounts',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACINCREMENT from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacincrement',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACMAXIMUM from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacmaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACMINIMUM from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACPINS from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacpins',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISDACPRESENT from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'isdacpresent',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDACCOUNTS from group: ANALOGOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Analogout');
        groupObj = groupObj(1);
        invoke(groupObj,'setdaccounts',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETFILTERWAVELENGTH from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getfilterwavelength',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETGRATING from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getgrating',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSLITSIZE from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getslitsize',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISDEFINED from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'isdefined',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETFILTERWAVELENGTH from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        invoke(groupObj,'setfilterwavelength',0,0,'000');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETGRATING from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        invoke(groupObj,'setgrating',0,0,'0');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSLITSIZE from group: BENCH
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Bench');
        groupObj = groupObj(1);
        invoke(groupObj,'setslitsize',0,0,'0');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETBOARDTEMPERATURECELSIUS from group: BOARDTEMPERATURE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Boardtemperature');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getboardtemperaturecelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% COEFFICIENTS from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'coefficients');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF0 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef0');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF1 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef1');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF2 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef2');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF3 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef3');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF4 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef4');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF5 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef5');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF6 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef6');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEF7 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoef7');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLCOEFFICIENTS from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlcoefficients');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNLORDER from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnlorder');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSTRAYLIGHT from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getstraylight');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSTRAYLIGHTSCOPE from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getstraylightscope');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWLCOEFFICIENTS from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwlcoefficients');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWLFIRST from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwlfirst');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWLINTERCEPT from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwlintercept');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWLSECOND from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwlsecond');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWLTHIRD from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwlthird');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF0 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef0',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF1 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef1',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF2 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef2',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF3 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef3',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF4 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef4',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF5 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef5',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF6 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef6',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEF7 from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoef7',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLCOEFFICIENTS from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlcoefficients',zeros(8, 1));
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNLORDER from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setnlorder',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSTRAYLIGHT from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setstraylight',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWLCOEFFICIENTS from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setwlcoefficients',zeros(8, 1));
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWLFIRST from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setwlfirst',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWLINTERCEPT from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setwlintercept',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWLSECOND from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setwlsecond',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWLTHIRD from group: COEFFICIENTS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Coefficients');
        groupObj = groupObj(1);
        invoke(groupObj,'setwlthird',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% CONTINUOUSSTROBECOUNTSTOMICROS from group: CONTINUOUSSTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Continuousstrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'continuousstrobecountstomicros',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCONTINUOUSSTROBEDELAY from group: CONTINUOUSSTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Continuousstrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcontinuousstrobedelay',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCONTINUOUSSTROBEDELAYINCREMENT from group: CONTINUOUSSTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Continuousstrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcontinuousstrobedelayincrement',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCONTINUOUSSTROBEDELAYMAXIMUM from group: CONTINUOUSSTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Continuousstrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcontinuousstrobedelaymaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCONTINUOUSSTROBEDELAYMINIMUM from group: CONTINUOUSSTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Continuousstrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcontinuousstrobedelayminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCONTINUOUSSTROBEDELAY from group: CONTINUOUSSTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Continuousstrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'setcontinuousstrobedelay',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ANALOGOUTCOUNTSTOMILLIAMPS from group: CURRENTOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Currentout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'analogoutcountstomilliamps',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACCOUNTS from group: CURRENTOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Currentout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdaccounts',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACINCREMENT from group: CURRENTOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Currentout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacincrement',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACMAXIMUM from group: CURRENTOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Currentout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacmaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDACMINIMUM from group: CURRENTOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Currentout');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdacminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDACCOUNTS from group: CURRENTOUT
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Currentout');
        groupObj = groupObj(1);
        invoke(groupObj,'setdaccounts',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDETECTORTEMPERATURECELSIUS from group: DETECTORTEMPERATURE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Detectortemperature');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdetectortemperaturecelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXTERNALTEMPERATURECELSIUS from group: EXTERNALTEMPERATURE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltemperature');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexternaltemperaturecelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXTERNALTRIGGERDELAY from group: EXTERNALTRIGGERDELAY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltriggerdelay');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexternaltriggerdelay',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXTERNALTRIGGERDELAYINCREMENT from group: EXTERNALTRIGGERDELAY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltriggerdelay');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexternaltriggerdelayincrement',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXTERNALTRIGGERDELAYMAXIMUM from group: EXTERNALTRIGGERDELAY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltriggerdelay');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexternaltriggerdelaymaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXTERNALTRIGGERDELAYMINIMUM from group: EXTERNALTRIGGERDELAY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltriggerdelay');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexternaltriggerdelayminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETEXTERNALTRIGGERDELAY from group: EXTERNALTRIGGERDELAY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltriggerdelay');
        groupObj = groupObj(1);
        invoke(groupObj,'setexternaltriggerdelay',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% TRIGGERDELAYCOUNTSTOMICROSECONDS from group: EXTERNALTRIGGERDELAY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Externaltriggerdelay');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'triggerdelaycountstomicroseconds',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDIRECTIONBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdirectionbits',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETMUXBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getmuxbits',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFPINS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofpins',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETTOTALGPIOBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'gettotalgpiobits',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETVALUEBIT from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getvaluebit',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETVALUEBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getvaluebits',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDIRECTIONALLBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setdirectionallbits',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDIRECTIONBIT from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setdirectionbit',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDIRECTIONBITMASK from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setdirectionbitmask',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETMUXALLBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setmuxallbits',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETMUXBIT from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setmuxbit',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETMUXBITMASK from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setmuxbitmask',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVALUEALLBITS from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setvalueallbits',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVALUEBIT from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setvaluebit',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVALUEBITMASK from group: GPIO
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Gpio');
        groupObj = groupObj(1);
        invoke(groupObj,'setvaluebitmask',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
   
    %% GETHIGHGAINDEFAULT from group: HIGHGAINMODE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highgainmode');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'gethighgaindefault',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% HASHIGHGAINDEFAULT from group: HIGHGAINMODE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highgainmode');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'hashighgaindefault',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETHIGHGAIN from group: HIGHGAINMODE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highgainmode');
        groupObj = groupObj(1);
        invoke(groupObj,'sethighgain',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETHIGHGAINDEFAULT from group: HIGHGAINMODE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highgainmode');
        groupObj = groupObj(1);
        invoke(groupObj,'sethighgaindefault',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ALLOCATEBUFFER from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        invoke(groupObj,'allocatebuffer',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFSPECTRAACQUIRED from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofspectraacquired');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSPECTRUM from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getspectrum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETTIMESTAMP from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'gettimestamp',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISSATURATED from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'issaturated',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% STARTACQUISITION from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        invoke(groupObj,'startacquisition',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% STOPACQUISITION from group: HIGHSPDACQ
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Highspdacq');
        groupObj = groupObj(1);
        invoke(groupObj,'stopacquisition');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETI2CBYTES from group: I2CBUS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'I2cbus');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'geti2cbytes',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETI2CBYTES from group: I2CBUS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'I2cbus');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'seti2cbytes',0,0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCURRENTOUTPUTCALIBRATION20MA from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcurrentoutputcalibration20ma',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCURRENTOUTPUTCALIBRATION4MA from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcurrentoutputcalibration4ma',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCURRENTOUTPUTENABLES from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcurrentoutputenables',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCURRENTOUTPUTENERGIZED from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcurrentoutputenergized',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCURRENTOUTPUTMAXIMUMCOUNTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcurrentoutputmaximumcounts',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCURRENTOUTPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getcurrentoutputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXCITATIONENABLE from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexcitationenable',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXCITATIONVOLTAGE from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexcitationvoltage',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETEXCITATIONVOLTAGEOPTIONS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getexcitationvoltageoptions',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINDYGPIOINPUTVALUES from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getindygpioinputvalues',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINDYGPIOOUTPUTENABLES from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getindygpiooutputenables',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINDYGPIOOUTPUTVALUES from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getindygpiooutputvalues',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFCURRENTINPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofcurrentinputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFCURRENTOUTPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofcurrentoutputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFINDYGPIO from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofindygpio',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFINDYMODULES from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofindymodules',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFVOLTAGEINPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofvoltageinputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFVOLTAGEOUTPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofvoltageoutputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETVOLTAGEOUTPUTMAXIMUMCOUNTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getvoltageoutputmaximumcounts',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETVOLTAGEOUTPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getvoltageoutputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SAMPLECURRENTINPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'samplecurrentinputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SAMPLEVOLTAGEINPUTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'samplevoltageinputs',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCURRENTOUTPUTCALIBRATION20MA from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setcurrentoutputcalibration20ma',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCURRENTOUTPUTCALIBRATION4MA from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setcurrentoutputcalibration4ma',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCURRENTOUTPUTCOUNTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setcurrentoutputcounts',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCURRENTOUTPUTENABLE from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setcurrentoutputenable',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCURRENTOUTPUTMILLIAMPS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setcurrentoutputmilliamps',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETEXCITATIONENABLE from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setexcitationenable',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETEXCITATIONVOLTAGE from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setexcitationvoltage',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETINDYGPIOCONFIGURATION from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setindygpioconfiguration',0,0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETINDYGPIOOUTPUTVALUES from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setindygpiooutputvalues',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVOLTAGEOUTPUTCOUNTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setvoltageoutputcounts',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVOLTAGEOUTPUTVOLTS from group: INDY
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Indy');
        groupObj = groupObj(1);
        invoke(groupObj,'setvoltageoutputvolts',0,0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINTERNALTRIGGERPERIODINCREMENT from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getinternaltriggerperiodincrement',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINTERNALTRIGGERPERIODMAXIMUM from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getinternaltriggerperiodmaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINTERNALTRIGGERPERIODMICROS from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getinternaltriggerperiodmicros',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETINTERNALTRIGGERPERIODMINIMUM from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getinternaltriggerperiodminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETTRIGGERSOURCE from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'gettriggersource',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETINTERNALTRIGGERPERIODMICROS from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        invoke(groupObj,'setinternaltriggerperiodmicros',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETTRIGGERSOURCE from group: INTERNALTRIGGER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Internaltrigger');
        groupObj = groupObj(1);
        invoke(groupObj,'settriggersource',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETCOLLECTIONAREA from group: IRRADIANCECALIBRATIONFACTOR
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Irradiancecalibrationfactor');
    % % %     groupObj = groupObj(1);
    % % %     [returnvalue] = invoke(groupObj,'getcollectionarea',0);
    % % %
    % % %     % Store the result so that it can be returned.
    % % %     varargout = {varargout{:}, returnvalue};
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% GETIRRADIANCECALIBRATIONFACTORS from group: IRRADIANCECALIBRATIONFACTOR
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Irradiancecalibrationfactor');
    % % %     groupObj = groupObj(1);
    % % %     [returnvalue] = invoke(groupObj,'getirradiancecalibrationfactors',0);
    % % %
    % % %     % Store the result so that it can be returned.
    % % %     varargout = {varargout{:}, returnvalue};
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% HASCOLLECTIONAREA from group: IRRADIANCECALIBRATIONFACTOR
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Irradiancecalibrationfactor');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'hascollectionarea',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETCOLLECTIONAREA from group: IRRADIANCECALIBRATIONFACTOR
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Irradiancecalibrationfactor');
    % % %     groupObj = groupObj(1);
    % % %     invoke(groupObj,'setcollectionarea',0,0);
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% SETIRRADIANCECALIBRATIONFACTORS from group: IRRADIANCECALIBRATIONFACTOR
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Irradiancecalibrationfactor');
    % % %     groupObj = groupObj(1);
    % % %     invoke(groupObj,'setirradiancecalibrationfactors',0,0);
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% GETALLLS450INFO from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getallls450info',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLS450COEFFICIENTS from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getls450coefficients',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLS450INFO from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getls450info',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETO2PROBECALIBRATIONCOEFFICIENTS from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'geto2probecalibrationcoefficients',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% LOADINFO from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'loadinfo',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% LOADLS450COEFFICIENTSFROMEEPROM from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'loadls450coefficientsfromeeprom',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SAVEINFO from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'saveinfo',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETALLLS450INFO from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'setallls450info',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETLEDMODE from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'setledmode',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETLS450COEFFICIENTS from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'setls450coefficients',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETLS450INFO from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'setls450info',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETO2PROBECALIBRATIONCOEFFICIENTS from group: LS450
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Ls450');
        groupObj = groupObj(1);
        invoke(groupObj,'seto2probecalibrationcoefficients',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNONLINEARITYCOEFFICIENTS from group: NONLINEARITYCORRECTIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Nonlinearitycorrectionprovider');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnonlinearitycoefficients',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNONLINEARITYCOEFFICIENTSSINGLECHANNEL from group: NONLINEARITYCORRECTIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Nonlinearitycorrectionprovider');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnonlinearitycoefficientssinglechannel',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% READNONLINEARITYCOEFFICIENTSFROMSPECTROMETER from group: NONLINEARITYCORRECTIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Nonlinearitycorrectionprovider');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'readnonlinearitycoefficientsfromspectrometer',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNONLINEARITYCOEFFICIENTS from group: NONLINEARITYCORRECTIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Nonlinearitycorrectionprovider');
        groupObj = groupObj(1);
        invoke(groupObj,'setnonlinearitycoefficients',0);
    
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
    
    
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
    
    catch aException
        % A MATLAB error occurred.
        
    
        if(isempty(strfind(aException.message, errorMsg)))
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
        else
        fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETNONLINEARITYCOEFFICIENTSSINGLECHANNEL from group: NONLINEARITYCORRECTIONPROVIDER
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Nonlinearitycorrectionprovider');
    % % %     groupObj = groupObj(1);
    % % %     invoke(groupObj,'setnonlinearitycoefficientssinglechannel',0,0,0);
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% WRITENONLINEARITYCOEFFICIENTSTOSPECTROMETER from group: NONLINEARITYCORRECTIONPROVIDER
    
% % % %     Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         Execute the function.
% % %         groupObj = get(deviceObj, 'Nonlinearitycorrectionprovider');
% % %         groupObj = groupObj(1);
% % %         invoke(groupObj,'writenonlinearitycoefficientstospectrometer',0,0);
% % %     
% % %         Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %     
% % %     
% % %         Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %     
% % %     catch aException
% % %         A MATLAB error occurred.
% % %         
% % %     
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %         errorcode = true;
% % %         fprintf('A MATLAB error occurred while testing the function.\n');
% % %         fprintf([aException.message '\n']);
% % %         else
% % %         fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% GETSATURATIONTHRESHOLD from group: SATURATIONTHRESHOLD
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Saturationthreshold');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsaturationthreshold',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSATURATIONTHRESHOLD from group: SATURATIONTHRESHOLD
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Saturationthreshold');
        groupObj = groupObj(1);
        invoke(groupObj,'setsaturationthreshold',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSINGLESTROBECOUNTSTOMICROS from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsinglestrobecountstomicros',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSINGLESTROBEHIGH from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsinglestrobehigh',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSINGLESTROBEINCREMENT from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsinglestrobeincrement',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSINGLESTROBELOW from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsinglestrobelow',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSINGLESTROBEMAXIMUM from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsinglestrobemaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSINGLESTROBEMINIMUM from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsinglestrobeminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSINGLESTROBEHIGH from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        invoke(groupObj,'setsinglestrobehigh',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSINGLESTROBELOW from group: SINGLESTROBE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Singlestrobe');
        groupObj = groupObj(1);
        invoke(groupObj,'setsinglestrobelow',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSPECTRUMTYPE from group: SPECTRUMTYPE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Spectrumtype');
        groupObj = groupObj(1);
        invoke(groupObj,'setspectrumtype',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSPIBYTES from group: SPIBUS
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Spibus');
    % % %     groupObj = groupObj(1);
    % % %     [returnvalue] = invoke(groupObj,'getspibytes',0,0,0);
    % % %
    % % %     % Store the result so that it can be returned.
    % % %     varargout = {varargout{:}, returnvalue};
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% GETSTRAYLIGHT from group: STRAYLIGHTCORRECTION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Straylightcorrection');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getstraylight',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSTRAYLIGHTCORRECTIONCOEFFICIENT from group: STRAYLIGHTCORRECTION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Straylightcorrection');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getstraylightcorrectioncoefficient',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% READSTRAYLIGHTCORRECTIONCOEFFICIENTFROMSPECTROMETER from group: STRAYLIGHTCORRECTION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Straylightcorrection');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'readstraylightcorrectioncoefficientfromspectrometer',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSTRAYLIGHT from group: STRAYLIGHTCORRECTION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Straylightcorrection');
        groupObj = groupObj(1);
        invoke(groupObj,'setstraylight',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSTRAYLIGHTCORRECTIONCOEFFICIENT from group: STRAYLIGHTCORRECTION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Straylightcorrection');
        groupObj = groupObj(1);
        invoke(groupObj,'setstraylightcorrectioncoefficient',0,0);
    
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
    
    
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
    
    catch aException
        % A MATLAB error occurred.
        
    
        if(isempty(strfind(aException.message, errorMsg)))
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
        else
        fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% WRITESTRAYLIGHTCOEFFICIENTTOSPECTROMETER from group: STRAYLIGHTCORRECTION
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Straylightcorrection');
    % % %     groupObj = groupObj(1);
    % % %     invoke(groupObj,'writestraylightcoefficienttospectrometer',0,0);
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% GETFIBERDIAMETER from group: STSBENCH
    
% % %     % Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         % Execute the function.
% % %         groupObj = get(deviceObj, 'Stsbench');
% % %         groupObj = groupObj(1);
% % %         [returnvalue] = invoke(groupObj,'getfiberdiameter',0);
% % %         
% % %         % Store the result so that it can be returned.
% % %         varargout = {varargout{:}, returnvalue};
% % %         
% % %         % Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %         
% % %         
% % %         % Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %         
% % %     catch aException
% % %         % A MATLAB error occurred.
% % %         
% % %         
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %             errorcode = true;
% % %             fprintf('A MATLAB error occurred while testing the function.\n');
% % %             fprintf([aException.message '\n']);
% % %         else
% % %             fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% GETID from group: STSBENCH
    
    % Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         % Execute the function.
% % %         groupObj = get(deviceObj, 'Stsbench');
% % %         groupObj = groupObj(1);
% % %         [returnvalue] = invoke(groupObj,'getid',0);
% % %         
% % %         % Store the result so that it can be returned.
% % %         varargout = {varargout{:}, returnvalue};
% % %         
% % %         % Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %         
% % %         
% % %         % Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %         
% % %     catch aException
% % %         % A MATLAB error occurred.
% % %         
% % %         
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %             errorcode = true;
% % %             fprintf('A MATLAB error occurred while testing the function.\n');
% % %             fprintf([aException.message '\n']);
% % %         else
% % %             fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% ISDEFINED from group: STSBENCH
    
% % %     % Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         % Execute the function.
% % %         groupObj = get(deviceObj, 'Stsbench');
% % %         groupObj = groupObj(1);
% % %         [returnvalue] = invoke(groupObj,'isdefined',0);
% % %         
% % %         % Store the result so that it can be returned.
% % %         varargout = {varargout{:}, returnvalue};
% % %         
% % %         % Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %         
% % %         
% % %         % Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %         
% % %     catch aException
% % %         % A MATLAB error occurred.
% % %         
% % %         
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %             errorcode = true;
% % %             fprintf('A MATLAB error occurred while testing the function.\n');
% % %             fprintf([aException.message '\n']);
% % %         else
% % %             fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% SETFIBERDIAMETER from group: STSBENCH
    
% % %     % Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         % Execute the function.
% % %         groupObj = get(deviceObj, 'Stsbench');
% % %         groupObj = groupObj(1);
% % %         invoke(groupObj,'setfiberdiameter',0,0);
% % %         
% % %         % Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %         
% % %         
% % %         % Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %         
% % %     catch aException
% % %         % A MATLAB error occurred.
% % %         
% % %         
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %             errorcode = true;
% % %             fprintf('A MATLAB error occurred while testing the function.\n');
% % %             fprintf([aException.message '\n']);
% % %         else
% % %             fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% SETID from group: STSBENCH
    
% % %     % Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         % Execute the function.
% % %         groupObj = get(deviceObj, 'Stsbench');
% % %         groupObj = groupObj(1);
% % %         invoke(groupObj,'setid',0,0);
% % %         
% % %         % Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %         
% % %         
% % %         % Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %         
% % %     catch aException
% % %         % A MATLAB error occurred.
% % %         
% % %         
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %             errorcode = true;
% % %             fprintf('A MATLAB error occurred while testing the function.\n');
% % %             fprintf([aException.message '\n']);
% % %         else
% % %             fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% GETDETECTORSETPOINTCELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdetectorsetpointcelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDETECTORTEMPERATURECELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdetectortemperaturecelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETDETECTORTMPERATURESETPOINTCELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getdetectortmperaturesetpointcelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETFANENABLE from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getfanenable',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSATURATIONINTENSITY from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsaturationintensity',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSETPOINTINCREMENTCELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsetpointincrementcelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSETPOINTMAXIMUMCELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsetpointmaximumcelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSETPOINTMINIMUMCELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsetpointminimumcelsius',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETTECENABLE from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'gettecenable',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISSAVETECSTATEENABLED from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'issavetecstateenabled',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SAVETECSTATE from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        invoke(groupObj,'savetecstate',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETDETECTORSETPOINTCELSIUS from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        invoke(groupObj,'setdetectorsetpointcelsius',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETFANENABLE from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        invoke(groupObj,'setfanenable',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETSATURATIONINTENSITY from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'setsaturationintensity',0,0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETTECENABLE from group: THERMOELECTRIC
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Thermoelectric');
        groupObj = groupObj(1);
        invoke(groupObj,'settecenable',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLAMPINTENSITYINCREMENT from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getlampintensityincrement',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLAMPINTENSITYMAXIMUM from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getlampintensitymaximum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETLAMPINTENSITYMINIMUM from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getlampintensityminimum',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETPOTVALUES from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getpotvalues',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETUVLAMPINTENSITY from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getuvlampintensity',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETVISLAMPINTENSITY from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getvislampintensity',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISLAMPON from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'islampon',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISVISLAMPON from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'isvislampon',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETLAMPON from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        invoke(groupObj,'setlampon',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETPOTVALUE from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        invoke(groupObj,'setpotvalue',0,0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETPOWERUPPOTVALUES from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        invoke(groupObj,'setpoweruppotvalues',0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETUVLAMPINTENSITY from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        invoke(groupObj,'setuvlampintensity',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVISLAMPINTENSITY from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        invoke(groupObj,'setvislampintensity',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETVISLAMPON from group: UVVISLIGHTSOURCE
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Uvvislightsource');
        groupObj = groupObj(1);
        invoke(groupObj,'setvislampon',0,0);
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETFIRMWAREVERSION from group: VERSION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Version');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getfirmwareversion',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISADVANCEDVERSION from group: VERSION
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Version');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'isadvancedversion',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWAVELENGTHCALIBRATIONCOEFFICIENTS from group: WAVELENGTHCALIBRATIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wavelengthcalibrationprovider');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwavelengthcalibrationcoefficients',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETWAVELENGTHS from group: WAVELENGTHCALIBRATIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wavelengthcalibrationprovider');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getwavelengths',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% READWAVELENGTHCALIBRATIONCOEFFICIENTSFROMSPECTROMETER from group: WAVELENGTHCALIBRATIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wavelengthcalibrationprovider');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'readwavelengthcalibrationcoefficientsfromspectrometer',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWAVELENGTHCALIBRATIONCOEFFICIENTS from group: WAVELENGTHCALIBRATIONPROVIDER
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wavelengthcalibrationprovider');
        groupObj = groupObj(1);
        invoke(groupObj,'setwavelengthcalibrationcoefficients',0);
    
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
    
    
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
    
    catch aException
        % A MATLAB error occurred.
        
    
        if(isempty(strfind(aException.message, errorMsg)))
        errorcode = true;
        fprintf('A MATLAB error occurred while testing the function.\n');
        fprintf([aException.message '\n']);
        else
        fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETWAVELENGTHS from group: WAVELENGTHCALIBRATIONPROVIDER
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Wavelengthcalibrationprovider');
    % % %     groupObj = groupObj(1);
    % % %     invoke(groupObj,'setwavelengths',0,0,0);
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% WRITEWAVELENGTHCOEFFICIENTSTOSPECTROMETER from group: WAVELENGTHCALIBRATIONPROVIDER
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Wavelengthcalibrationprovider');
    % % %     groupObj = groupObj(1);
    % % %     invoke(groupObj,'writewavelengthcoefficientstospectrometer',0,0);
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% DEMONSTRATEARCOPTIXSPECTROMETER from group: WRAPPEREXTENSIONS
    
% % %     % Reset errorcode.
% % %     errorcode = false;
% % %     try
% % %         % Execute the function.
% % %         groupObj = get(deviceObj, 'Wrapperextensions');
% % %         groupObj = groupObj(1);
% % %         invoke(groupObj,'demonstratearcoptixspectrometer');
% % %         
% % %         % Check if instrument error occurred.
% % %         result = geterror(deviceObj);
% % %         errorcode = ~strcmpi(result, noErrorMsg);
% % %         
% % %         
% % %         % Post information about error if one occurred.
% % %         if (errorcode == true)
% % %             fprintf('An instrument error occurred while executing the function.\n');
% % %             fprintf([result '\n']);
% % %         end
% % %         
% % %     catch aException
% % %         % A MATLAB error occurred.
% % %         
% % %         
% % %         if(isempty(strfind(aException.message, errorMsg)))
% % %             errorcode = true;
% % %             fprintf('A MATLAB error occurred while testing the function.\n');
% % %             fprintf([aException.message '\n']);
% % %         else
% % %             fprintf([groupObj.Name ' ' errorMsg '\n']) ;
% % %         end
% % %     end
% % %     
% % %     if(errorcode)
% % %         finalerrorcode = true;
% % %     end
    
    
    %% DISABLERAWSPECTRUMMODE from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        invoke(groupObj,'disablerawspectrummode');
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ENABLERAWSPECTRUMMODE from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'enablerawspectrummode');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETBADPIXELS from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getbadpixels',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETI2CBYTES from group: WRAPPEREXTENSIONS
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Wrapperextensions');
    % % %     groupObj = groupObj(1);
    % % %     [returnvalue] = invoke(groupObj,'geti2cbytes',0,0,0);
    % % %
    % % %     % Store the result so that it can be returned.
    % % %     varargout = {varargout{:}, returnvalue};
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% GETNUMBEROFCHANNELS from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofchannels',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETNUMBEROFENABLEDCHANNELS from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getnumberofenabledchannels',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% GETSATURATIONINTENSITY from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'getsaturationintensity',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISCHANNELENABLED from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'ischannelenabled',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% ISSPECTRUMVALID from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'isspectrumvalid',0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% OPENREMOTESPECTROMETER from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'openremotespectrometer','192.168.21.1','Remora','internet');
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETBADPIXELS from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'setbadpixels',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    
    %% SETI2CBYTES from group: WRAPPEREXTENSIONS
    
    % % % % Reset errorcode.
    % % % errorcode = false;
    % % % try
    % % %     % Execute the function.
    % % %     groupObj = get(deviceObj, 'Wrapperextensions');
    % % %     groupObj = groupObj(1);
    % % %     [returnvalue] = invoke(groupObj,'seti2cbytes',0,0,0,0);
    % % %
    % % %     % Store the result so that it can be returned.
    % % %     varargout = {varargout{:}, returnvalue};
    % % %
    % % %     % Check if instrument error occurred.
    % % %     result = geterror(deviceObj);
    % % %     errorcode = ~strcmpi(result, noErrorMsg);
    % % %
    % % %
    % % %     % Post information about error if one occurred.
    % % %     if (errorcode == true)
    % % %         fprintf('An instrument error occurred while executing the function.\n');
    % % %         fprintf([result '\n']);
    % % %     end
    % % %
    % % % catch aException
    % % %     % A MATLAB error occurred.
    % % %     
    % % %
    % % %     if(isempty(strfind(aException.message, errorMsg)))
    % % %     errorcode = true;
    % % %     fprintf('A MATLAB error occurred while testing the function.\n');
    % % %     fprintf([aException.message '\n']);
    % % %     else
    % % %     fprintf([groupObj.Name ' ' errorMsg '\n']) ;
    % % %     end
    % % % end
    % % %
    % % % if(errorcode)
    % % %     finalerrorcode = true;
    % % % end
    
    
    %% SETSATURATIONINTENSITY from group: WRAPPEREXTENSIONS
    
    % Reset errorcode.
    errorcode = false;
    try
        % Execute the function.
        groupObj = get(obj, 'Wrapperextensions');
        groupObj = groupObj(1);
        [returnvalue] = invoke(groupObj,'setsaturationintensity',0,0);
        
        % Store the result so that it can be returned.
        varargout = {varargout{:}, returnvalue};
        
        % Check if instrument error occurred.
        result = geterror(obj);
        errorcode = ~strcmpi(result, noErrorMsg);
        
        
        % Post information about error if one occurred.
        if (errorcode == true)
            fprintf('An instrument error occurred while executing the function.\n');
            fprintf([result '\n']);
        end
        
    catch aException
        % A MATLAB error occurred.
        
        
        if(isempty(strfind(aException.message, errorMsg)))
            errorcode = true;
            fprintf('A MATLAB error occurred while testing the function.\n');
            fprintf([aException.message '\n']);
        else
            fprintf([groupObj.Name ' ' errorMsg '\n']) ;
        end
    end
    
    if(errorcode)
        finalerrorcode = true;
    end
    
    % Assign finalerrorcode to errorcode.
    % If finalerrorcode is true, at least one function failed in Function Sweep.
    errorcode = finalerrorcode;
    
    % Post message indicating if test step passed.
    if (errorcode == true)
        errorOccurred = true;
        fprintf('Test step status: FAILED\n');
    elseif (stepWarningOccurred == true)
        fprintf('Test step status: PASSED with warnings\n');
    else
        fprintf('Test step status: PASSED\n');
    end
    
    if exist('interfaceObj') &amp;&amp; (okToDeleteInterfaceObj == true)
        delete(interfaceObj);
    end
    
    % Post results.
    fprintf(['Stop time: ' datestr(now) '\n']);
    if (errorOccurred == true)
        fprintf('Test status: FAILED\n');
    elseif (warningOccurred == true)
        fprintf('Test status: PASSED with warnings\n');
    else
        fprintf('Test status: PASSED\n');
    end
    
catch aException
    % An error occurred while running the test.
    fprintf('An error occurred while executing the test.\n');
    fprintf([aException.message '\n']);
    
    % Cleanup.
    if exist('interfaceObj') &amp;&amp; (okToDeleteInterfaceObj == true)
        delete(interfaceObj)
    end
    
    if exist('deviceObj')
        delete(obj)
    end
end

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>sendSimulatedTriggerSignal</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = sendSimulatedTriggerSignal(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.sendSimulatedTriggerSignal(spectrometerIndex);
</MCode>
               </Code>
               <Description>Cause the spectrometer to behave exactly as if it had received an external hardware trigger signal. 
After calling this method, you should normally call wrapper.flushSpectrum() 
The purpose of this method is to provide the user with a way to regain control of the spectrometer after putting the spectrometer into a hardware trigger mode in the case where the hardware trigger signal never occurs. The typical sequence of calls is as follows: 
wrapper.setTriggerMode(spectrometerIndex,); 
wrapper.setTimeout(spectrometerIndex,); 
wrapper.getSpectrum(spectrometerIndex); 
if (wrapper.isTimeout(spectrometerIndex) == true) { 
&amp;NBSP;&amp;NBSP;wrapper.sendSimulatedTriggerSignal(spectrometerIndex); 
&amp;NBSP;&amp;NBSP;wrapper.flushSpectrum(spectrometerIndex); 
} 

As of February 2012, only the STS spectrometer supports this capability. 


Parameters:
spectrometerIndex - 
Returns:
boolean true if successful, else return false if an error occurred (Either the spectrometer does not support this capability, or an IOException occurred.)
</Description>
            </Method>
            <Method>
               <Name>setAutoToggleStrobeLampEnable</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setAutoToggleStrobeLampEnable(obj, spectrometerIndex, channelIndex, enable)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setAutoToggleStrobeLampEnable(spectrometerIndex, channelIndex, enable);
</MCode>
               </Code>
               <Description>When auto-toggling is enabled, and setStrobeEnable() is set to true, the lamp will be automatically turned on for the duration of each spectrum acquisition, and then turned off until the next spectrum is requested. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
enable - 
</Description>
            </Method>
            <Method>
               <Name>setBoxcarWidth</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setBoxcarWidth(obj, spectrometerIndex, channelIndex, numberOfPixelsOnEitherSideOfCenter)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setBoxcarWidth(spectrometerIndex, channelIndex, numberOfPixelsOnEitherSideOfCenter);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
numberOfPixelsOnEitherSideOfCenter - (default is 0) The number of pixels on either side of a given pixel to average together when obtaining a spectrum. For example, if you set this parameter to 2, each pixel of the acquired spectrum will be the result of averaging 5 pixels together, 2 on the left, 2 on the right, and the pixel itself. Set this value to 0 to avoid this "smoothing" mechanism.</Description>
            </Method>
            <Method>
               <Name>setCalibrationCoefficientsIntoBuffer</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setCalibrationCoefficientsIntoBuffer(obj, spectrometerIndex, channelIndex, applyWavelengthCoefficients, applyStrayLightConstant, applyNonlinearityCoefficients)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.')) ;
end

returnValue = driverData.Wrapper.setCalibrationCoefficientsIntoBuffer(spectrometerIndex, channelIndex, driverData.Coefficients, applyWavelengthCoefficients, applyStrayLightConstant, applyNonlinearityCoefficients);
</MCode>
               </Code>
               <Description>Write various calibration settings from the supplied Coefficients object into our buffer area for the specified spectrometer. These new settings will be used in subsequent calculations for this spectrometer. This method does not write these values into the spectrometer's EEPROM memory. 
Before calling this method, you must 
	* first call insertKey(), otherwise this method will do nothing. 
	* create new coefficient object by invoking the Coefficients group and set valid values for each of these members
		WavelengthCoefficients 
			• Invoke setWlIntercept();
			• Invoke setWlFirst()
			• Invoke setWlSecond()
			• Invoke setWlThird()
		NonlinearityCoefficients - 
			• Invoke setNlCoef0()
			• Invoke setNlCoef1() 
			• Invoke setNlCoef2() 
			• Invoke setNlCoef3() 
			• Invoke setNlCoef4() 
			• Invoke setNlCoef5() 
			• Invoke setNlCoef6()
			• Invoke setNlCoef7() 
			• Invoke setNlOrder() 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of the selected spectrometer.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
applyWavelengthCoefficients - If true, we will copy the new wavelength coefficients from the newCoefficients parameter into the buffer for this spectrometer. If false, these values will be ignored. 
applyStrayLightConstant - If true, we will copy the new stray light constants from the newCoefficients parameter into the buffer for this spectrometer. If false, these values will be ignored. 
Here are the actual members which will be set (be sure you provide valid values for each of these members!) 
•setStrayLight(double intercept, double slope) 
applyNonlinearityCoefficients - If true, we will copy the new non-linearity coefficients from the newCoefficients parameter into the buffer for this spectrometer. If false, these values will be ignored. 

Returns:
true if we succesfully wrote the new values into our buffer. Return false if the user has not yet called the insertKey() method with a valid key.


</Description>
            </Method>
            <Method>
               <Name>setCalibrationCoefficientsIntoEEProm</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setCalibrationCoefficientsIntoEEProm(obj, spectrometerIndex, channelIndex, applyWavelengthCoefficients, applyStrayLightConstant, applyNonlinearityCoefficients)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.'));
end

returnValue = driverData.Wrapper.setCalibrationCoefficientsIntoEEProm(spectrometerIndex, channelIndex, driverData.Coefficients, applyWavelengthCoefficients, applyStrayLightConstant, applyNonlinearityCoefficients);
</MCode>
               </Code>
               <Description>Similar to the setCalibrationCoefficientsIntoBuffer() method, except the calibration coefficients will be copied into the spectrometer's EEPROM. These values will also be written to our internal calibration buffer and used in all subsequent spectral acquisitions. </Description>
            </Method>
            <Method>
               <Name>setCorrectForDetectorNonlinearity</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setCorrectForDetectorNonlinearity(obj, spectrometerIndex,channelIndex, enable)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.setCorrectForDetectorNonlinearity(spectrometerIndex,channelIndex, enable);
</MCode>
               </Code>
               <Description>It is important to test the return value of this method. If your spectrometer does not have valid non-linearity correction coefficients and you call getSpectrum(), you will receive "infinity" for all of the pixel values. If you are running your app in an older IDE, such as Visual Basic 6, your app AND the IDE may terminate abruptly and without warning! 

Returns:
true if the correction mode was successfully enabled or disabled, as requested by the user. If false, it means the user attempted to enable non-linearity correction, but the spectrometer has all zeroes for the non-linearity correction coefficients.
</Description>
            </Method>
            <Method>
               <Name>setCorrectForElectricalDark</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCorrectForElectricalDark(obj, spectrometerIndex,channelIndex, enable)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setCorrectForElectricalDark(spectrometerIndex,channelIndex, enable);
</MCode>
               </Code>
               <Description>Some spectrometers have optically dark pixels -- ie. pixels which have been optically masked so that no light may enter. Even when no light enters the CCD pixel, there will be some leakage of electrons from the well. This feature allows us to correct for this leakage. 
When this feature is enabled, we will compute the average dark pixel value based on an average of the 15 most recent spectrum acquisitions. We then subtract this average value from all pixels. 


Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of the selected spectrometer.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
enable - - a value of "1" enables electric dark correction. A value of "0" disables this feature.

</Description>
            </Method>
            <Method>
               <Name>setDetectorSetPointCelsius</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDetectorSetPointCelsius(obj, spectrometerIndex, temperatureCelsius)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setDetectorSetPointCelsius(spectrometerIndex, temperatureCelsius);
</MCode>
               </Code>
               <Description>IMPORTANT: you should first call isFeatureSupportedThermoElectric() before calling this method because not all spectrometers support this feature. 
This method is only needed by VB6 users. All other languages should use getFeatureControllerThermoElectric() to obtain the ThermoElectric object which can then be used to set/get the temperature of the spectrometer. 

If you use this method, you must still get the above-mentioned feature controller object and then call featureController.setTECEnable(true) 


Parameters:
temperatureCelsius - the temperature we want the spectrometer to approach. 
Returns:
true if the operation was performed successfully, else return false If this method fails it is probably because the spectrometer does not support the thermoelectric feature.

</Description>
            </Method>
            <Method>
               <Name>setEEPromInfo</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setEEPromInfo(obj, spectrometerIndex, slot, str)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.setEEPromInfo(spectrometerIndex, slot, str);
</MCode>
               </Code>
               <Description>Before calling this method, you must first call insertKey(), otherwise this method will do nothing. 

Parameters:
slot - 0-N the parameter position within the spectrometer's non-volatile memory we wish to set. 
Standard locations are as follows: 
CAUTION: not all spectrometers follow these conventions. Be sure to check the data sheets for your spectrometer. 
•0 - serial number (this slot may not be written by the customer) 
•1 - wavelength calibration coefficient - 0th order (aka "intercept") 
•2 - wavelength calibration coefficient - 1st order 
•3 - wavelength calibration coefficient - 2nd order 
•4 - wavelength calibration coefficient - 3rd order 
•5 - stray light constant 
•6 - non-linearity correction coefficient - 0th order 
•7 - non-linearity correction coefficient - 1st order 
•8 - non-linearity correction coefficient - 2nd order 
•9 - non-linearity correction coefficient - 3rd order 
•10 - non-linearity correction coefficient - 4th order 
•11 - non-linearity correction coefficient - 5th order 
•12 - non-linearity correction coefficient - 6th order 
•13 - non-linearity correction coefficient - 7th order 
•14 - polynomial order of non-linearity calibration 
•15 - optical bench configuration (not writable by the customer) 
Format: gg fff sss 
gg: grating number 
fff: filter wavelength 
sss: slit size 
•16 - USB2000 configuration (not writable by the customer) 
Format: A W L V 
A: array coating manufacturer 
W: array wavelength (VIS, UV, OFLV) 
L: L2 lens installed 
V: CPLD version 
By default, all spectrometers permit you to write to slots 1-14. 
However, several spectrometers permit you to write to some additional slots. Below is a list of the exceptions. 
CAUTION: you must consult the data sheet for your spectrometer to determine how each EEPROM slot is used and whether it is safe or appropriate for you to write your own custom values into those slots. This information is provided in the "USB Command Descriptions" section of each data sheet. See the "Query Information" command. The OEM data sheets may be downloaded from the following link www.oceanoptics.com/technical/engineeringdocs.asp 

•The ADC1000USB will allow you to write to slots 1 – 44 (basically every slot except slot 0 which is the serial number). 
•The HR2000 spectrometer will also let you write to slots 17, 18, and 19. Caution: these slots, although not currently used by Ocean Optics, are "reserved" for future use and may become unavailable for your purposes. 
•The HR2000+ spectrometer will also let you write to slots 17, 18, and 19. Caution: these slots, although not currently used by Ocean Optics, are "reserved" for future use and may become unavailable for your purposes. 
•The HR4000 spectrometer will also let you write to slots 17, 18, and 19. Caution: these slots, although not currently used by Ocean Optics, are "reserved" for future use and may become unavailable for your purposes. 
•The Maya2000 spectrometer will also let you write to slot 19. This slot is "user defined" and available for whatever purpose you may have. 
•The Maya2000Pro spectrometer will also let you write to slot 19. This slot is "user defined" and available for whatever purpose you may have. 
•The QE65000 spectrometer will also let you write to slot 19. This slot is "user defined" and available for whatever purpose you may have. 
•The USB2000+ spectrometer will also let you write to slots 17, 18, and 19. Caution: these slots, although not currently used by Ocean Optics, are "reserved" for future use and may become unavailable for your purposes. 
•The USB4000 spectrometer will also let you write to slots 19 through 30, inclusive. These slots are "user defined" and available for whatever purpose you may have. 
str - the string to be written to the specified slot. Maximum allowed length is 15 characters. 
Returns:
true if the requested operation was successful, false if an error occurred. If an error occured, call getLastException() for more information about the error. We may also return false if you have not yet called insertKey() to enable this function. Another possible reason why this method may return false is if the slot number you specified is out of range.
</Description>
            </Method>
            <Method>
               <Name>setExternalTriggerMode</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setExternalTriggerMode(obj, spectrometerIndex, channelIndex, mode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setExternalTriggerMode(spectrometerIndex, channelIndex, mode);
</MCode>
               </Code>
               <Description>Sets the external trigger mode of the spectrometer. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. Defaults to channel 0 of the selected spectrometer.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
mode - int, The meaning of this parameter depends on the version of firmware in your spectrometer. You should consult the OEM data sheet for your particular spectrometer to be certain of the modes it supports. 
For firmware versions 3.00 and higher, these are the standard modes: (see http://www.oceanoptics.com/technical/External-Triggering2.pdf for details) 

•0 = normal (free running) mode 
•1 = software trigger mode 
•2 = external hardware level trigger mode 
•3 = external synchronization trigger mode 
•4 = external hardware edge trigger mode 
For older firmware versions, many of the spectrometers support the following modes: 

•0 = normal mode Spectrometer is "free running" (ie. continuously acquiring new spectra). Integration time is determined by calling the setIntegrationTime() method. 
When you call the getSpectrum() method, it will "immediately" return with the next available spectrum, subject to delay due to the length of integration time, number of scans to average, and possibly a stability scan. 
•1 = software trigger mode Uses a "level triggered" signal as opposed to an "edge triggered" signal. In this mode, the spectrometer is operating in "free running" mode (ie. continuously acquiring new spectra). Integration time is determined by calling the setIntegrationTime() method. When you call getSpectrum(), this method blocks until the trigger signal goes "high". It then returns the next completed spectrum acquisition. As long as the trigger signal remains high, calls to getSpectrum() will return immediately (subject to the integration time you have set). 
•2 = synchronization trigger mode In this mode, the integration time is automatically determined by the spectrometer, based on the average length of time between the trigger signals you supply. 
•3 = hardware trigger mode Uses an "edge triggered" signal to initiate acquisition of a new spectrum. In this mode, the spectrometer enters a "sleep" state until the rising-edge of a trigger signal initiates the acquisition of a new spectrum. Your call to the getSpectrum() method will block (ie. not return) until a new spectrum has been acquired. 
•4 = single-shot trigger mode (aka quasi-realtime mode) This mode is only supported by certain specific spectrometers, such as the QE65000, NIR256, and NIR512. In this mode, the spectrometer automatically sets its integration time to the minimum allowed value and then begins to continuously acquire spectra. The user then calls wrapper.setIntegrationTime() to set the integration time to the desired period. The spectrometer completes the current spectrum acquisition, which should be very quick since the original integration time was the minimum allowed value. Then it sets the new integration time and immediately begins to acquire a new spectrum using the new settings. After the new spectrum has been acquired, the spectrometer automatically reverts back to the minimum integration time. 
The purpose of this mode is to allow the user to initiate the acquisition of new spectra having lengthy integration times at precisely controlled starting points in time. 
Important note on changing the external trigger mode 
The trigger mode of a spectrometer may only be changed while the spectrometer is actually acquiring a spectrum. This is not a difficulty when changing the trigger mode from mode 0 to any other mode, since in mode 0 the spectrometer is acquiring spectra continuously. However, if you are in modes 1, 2, or 3, you must take steps in your application software to ensure that your call to setExternalTriggerMode() occurs while the spectrometer is actually acquiring a spectrum.

</Description>
            </Method>
            <Method>
               <Name>setIntegrationTime</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>setIntegrationTime(obj, spectrometerIndex, channelIndex, usec)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setIntegrationTime(spectrometerIndex, channelIndex, usec);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control. 
IMPORTANT NOTE: when you set the integration time for a channel on the ADC1000-USB, you are setting the integration time for all enabled channels on that device. The ADC1000-USB does not allow you to set different integration times for each channel.
usec - units: microseconds
</Description>
            </Method>
            <Method>
               <Name>setNetworkCommunicationParameters</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNetworkCommunicationParameters(obj, spectrometerIndex, socketTimeoutMilliseconds, checkForBytesAvailable, spectrumReadThrottleMilliseconds, spectrumReadRetryLimit)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setNetworkCommunicationParameters(spectrometerIndex, socketTimeoutMilliseconds, checkForBytesAvailable, spectrumReadThrottleMilliseconds, spectrumReadRetryLimit);
</MCode>
               </Code>
               <Description>Set various parameters that control how network communication errors are handled. Currently these settings only apply to the JAZ-over-ethernet spectrometer. 
IMPORTANT: make sure your settings are consistent with the integration time setting for your spectrometer. For example, you do not want the socketTimeoutMilliseconds setting to be shorter than the integration time of your spectrometer, or it will ALWAYS time out. 

IMPORTANT: if you set spectrumReadRetryLimit to a non-zero value, you must also set spectrumReadThrottleMilliseconds to a non-zero value, and/or set checkForBytesAvailable to FALSE. Otherwise OmniDriver may fail to wait a reasonable length of time for the data to arrive. 


Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
socketTimeoutMilliseconds - This timeout will be applied to ALL network communications. The default setting is "0", which represents an infinite timeout.
checkForBytesAvailable - If true, we will check for the availability of data before calling the read() function. If no data is available yet, we will not call the read() method. Default is false.
spectrumReadThrottleMilliseconds - Number of milliseconds to wait before each call to the read() function. Default is 0, which means we do not artificially slow down communications.
spectrumReadRetryLimit - Maximum number of times we will call the read() function while attempting to read the bytes of the spectrum. Default is 0, which means "no limit".

</Description>
            </Method>
            <Method>
               <Name>setScansToAverage</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setScansToAverage(obj, spectrometerIndex, numberOfScansToAverageTogether,)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setScansToAverage(spectrometerIndex, numberOfScansToAverageTogether);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
numberOfScansToAverage - Default is "1" - ie. do not average multiple scans together. Values less than 1 will be set to 1.

</Description>
            </Method>
            <Method>
               <Name>setStrobeEnable</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setStrobeEnable(obj, spectrometerIndex, channelIndex, lampOn)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.setStrobeEnable(spectrometerIndex, channelIndex, lampOn);
</MCode>
               </Code>
               <Description>Caveat: the lamp will not respond to this command until the next call to getSpectrum(). 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
lampOn - If non-zero, turn lamp on. If zero, turn lamp off.
</Description>
            </Method>
            <Method>
               <Name>setTimeout</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setTimeout(obj, spectrometerIndex, timeoutMilliseconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
returnValue = driverData.Wrapper.setTimeout(spectrometerIndex, timeoutMilliseconds);
</MCode>
               </Code>
               <Description>Caveats: 
1. The timeout setting applies to all channels. 
2. This method only applies to USB spectrometers. 


Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
timeoutMilliseconds - Units: milliseconds. A value of 0 disables the timeout capability, causing getSpectrum() to wait "forever". 
Returns:
1 if successful, -1 if error occured
</Description>
            </Method>
            <Method>
               <Name>stopAveraging</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function stopAveraging(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

driverData = get(obj, 'DriverData');
driverData.Wrapper.stopAveraging(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Abort the most recent call to getSpectrum() for the specified spectrometer. This causes getSpectrum() to return as soon as the current spectrum acquisition has completed. If "scansToAverage" is set to one, this method will have no effect. When “scansToAverage” is set to a value greater than one, a single call to wrapper.getSpectrum() results in multiple spectral acquisitions. The stopAveraging() method only prevents these additional spectral acquisitions, which may not yet been collected, from being requested. You should ignore the data returned by getSpectrum() when you call the stopAveraging() method. This method may safely be called from any thread (including the main foregroud thread), regardless of which thread the spectrometer "belongs" to. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>analogin</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogIn1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getVoltageIn</Name>
               <Location>analogin</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getVoltageIn(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogIn = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogIn');

returnValue = featureControllerAnalogIn.getVoltageIn();
</MCode>
               </Code>
               <Description>Read the voltage from the device.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>analogout</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AnalogOut1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>analogOutCountsToVolts</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = analogOutCountsToVolts(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.analogOutCountsToVolts(counts);

</MCode>
               </Code>
               <Description>Computes the approximate voltage that the DAC should output when set to a particular number of counts. 

Parameters:
counts - Number of counts to convert 
Returns:
Voltage (in volts) of the DAC for the given number of counts
</Description>
            </Method>
            <Method>
               <Name>getDACCounts</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACCounts(obj , spectrometerIndex, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.getDACCounts(index);

</MCode>
               </Code>
               <Description>Gets the current number of counts being sent to the DAC. The underlying device may not support this operation directly, so the value may be indeterminate, and a cached value may be returned. 

Parameters:
index - The pin index of the DAC. 
Returns:
Integer containing the number of DAC counts, or null if the value is not known (as will be the case until setDACCounts() is first called).

</Description>
            </Method>
            <Method>
               <Name>getDACIncrement</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACIncrement(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.getDACIncrement();

</MCode>
               </Code>
               <Description>Gets the step size for values that can be sent to setDACCounts(). This is intended to support SpinnerNumberModels. 

Returns:
Step size for counts</Description>
            </Method>
            <Method>
               <Name>getDACMaximum</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.getDACMaximum();

</MCode>
               </Code>
               <Description>Gets the largest number of counts that can legally be sent to setDACCounts() 

Returns:
Number of counts
</Description>
            </Method>
            <Method>
               <Name>getDACMinimum</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.getDACMinimum();

</MCode>
               </Code>
               <Description>Gets the smallest number of counts that can legally be sent to setDACCounts() 

Returns:
Number of counts
</Description>
            </Method>
            <Method>
               <Name>getDACPins</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACPins(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.getDACPins();

</MCode>
               </Code>
               <Description>Returns the number of pins on the DAC. 

Returns:
the number of pins on the DAC.</Description>
            </Method>
            <Method>
               <Name>isDACPresent</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isDACPresent(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

returnValue = featureControllerAnalogOut.isDACPresent();

</MCode>
               </Code>
               <Description>Getter for property dacPresent. 

Returns:
a boolean. true DAC is present, or false if the DAC is not present in the spectrometer. 
Throws: 
java.io.IOException - if errors occur communicating with the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>setDACCounts</Name>
               <Location>analogout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDACCounts(obj , spectrometerIndex, counts, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerAnalogOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'AnalogOut');

featureControllerAnalogOut.setDACCounts(counts, index);

</MCode>
               </Code>
               <Description>Sets the DAC to output to the specified level. The underlying commands are expected to be: 
•ADC1000: OP_DACWRITE (0x52)
•HR2000+, HR4000, QE65000: OP_PSOCWRITE (0x69)
•LS-450-AOUT: OP_SETDAVALUE (0x25)

Parameters:
index - The pin index to the DAC.
counts - Number of counts to send to the DAC. 
Throws: 
java.io.IOException - is thrown if the command cannot be sent to the device.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>bench</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Bench1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getFilterWavelength</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getFilterWavelength(obj , spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

returnValue = char(benchObject.getFilterWavelength());</MCode>
               </Code>
               <Description>Getter for the property filterWavelength. 

Returns:
the filter wavelength in nm.
</Description>
            </Method>
            <Method>
               <Name>getGrating</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getGrating(obj , spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

returnValue = char(benchObject.getGrating());</MCode>
               </Code>
               <Description>Getter for the property grating. 

Returns:
the grating number.
</Description>
            </Method>
            <Method>
               <Name>getSlitSize</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSlitSize(obj , spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

returnValue = char(benchObject.getSlitSize());</MCode>
               </Code>
               <Description>Getter for the property slitSize. 

Returns:
the slit size in mm.
</Description>
            </Method>
            <Method>
               <Name>isDefined</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isDefined(obj , spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

returnValue = benchObject.isDefined();</MCode>
               </Code>
               <Description>The purpose of this method is to allow OmniDriver applications, written in other languages, to test whether this Bench object has been defined yet (and therefore will NOT return NULL references). The problem is that if any public method exposed in the Wrapper API returns a NULL, you will get a NullPointerException in the C/C++ layer. Currently, the STSBench class overrides this method. 

Returns:
true if all the fields of this Bench object have been loaded with non-null values.
</Description>
            </Method>
            <Method>
               <Name>setFilterWavelength</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setFilterWavelength(obj , spectrometerIndex, channelIndex, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

benchObject.setFilterWavelength(value);</MCode>
               </Code>
               <Description>Setter for the property filterWavelength. 

Parameters:
value - the filter wavelength in nm.
</Description>
            </Method>
            <Method>
               <Name>setGrating</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setGrating(obj , spectrometerIndex, channelIndex, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

benchObject.setGrating(value);</MCode>
               </Code>
               <Description>Setter for the property grating. 

Parameters:
value - the grating number.
</Description>
            </Method>
            <Method>
               <Name>setSlitSize</Name>
               <Location>bench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setSlitSize(obj , spectrometerIndex, channelIndex, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

benchObject = driverData.Wrapper.getBench(spectrometerIndex, channelIndex);

benchObject.setSlitSize(value);</MCode>
               </Code>
               <Description>Setter for the property slitSize. 

Parameters:
value - the slit size in mm.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>boardtemperature</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="BoardTemperature1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getBoardTemperatureCelsius</Name>
               <Location>boardtemperature</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getBoardTemperatureCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerBoardTemperature = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'BoardTemperature');

returnValue = featureControllerBoardTemperature.getBoardTemperatureCelsius();

</MCode>
               </Code>
               <Description>Reads the Printed Circuit Board Temperature. The spectroemer contains an DS1721 temperature sensor chip which is mounted to the under side of the PCB. The value returned is a signed 16-bit A/D conversion value which is equated to temperature by: 
Temperature (C) = .003906 * ADC Value 

Command Byte Format 
Byte 0:   0x6C 

Return Format 
Byte 0:   Read Result 
Byte 1:   ADC Value LSB 
Byte 2:   ADC Value MSB 

If the operation was successful, the Read Result byte value will be 0x08. All other values indicate the operation was unsuccessful.

Note that the underlying operations are expected to be: 

•OP_PSOC_READ (0x3f) for the NIR256 and NIR512 
•OP_READTEMP (0x6C) for the HR4000, HR2000+, and QE65000 

Returns:
Returns a double with the measured temperature in Celsius 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>coefficients</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Coefficients1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Coefficients</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = Coefficients(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

driverData.Coefficients = com.oceanoptics.omnidriver.spectrometer.Coefficients();
set(deviceObj, 'DriverData', driverData);

returnValue = obj;</MCode>
               </Code>
               <Description>Creates a new instance of Coefficients. </Description>
            </Method>
            <Method>
               <Name>getNlCoef0</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef0(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Coefficients.getNlCoef0();</MCode>
               </Code>
               <Description>Returns the 0th order non-linearity correction coefficient. 

Returns:
0th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef1</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef1(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.'));  
end

returnValue = driverData.Coefficients.getNlCoef1();
</MCode>
               </Code>
               <Description>Returns the 1st order non-linearity correction coefficient. 

Returns:
1st order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef2</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef2(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.'));  
end

returnValue = driverData.Coefficients.getNlCoef2();
</MCode>
               </Code>
               <Description>Returns the 2nd order non-linearity correction coefficient. 

Returns:
2nd order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef3</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef3(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.'));  
end

returnValue = driverData.Coefficients.getNlCoef3();
</MCode>
               </Code>
               <Description>Returns the 3rd order non-linearity correction coefficient. 

Returns:
3rd order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef4</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef4(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getNlCoef4();
</MCode>
               </Code>
               <Description>Returns the 3rd order non-linearity correction coefficient. 

Returns:
3rd order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef5</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef5(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getNlCoef5();
</MCode>
               </Code>
               <Description>Returns the 4th order non-linearity correction coefficient. 

Returns:
4th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef6</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef6(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getNlCoef6();
</MCode>
               </Code>
               <Description>Returns the 5th order non-linearity correction coefficient. 

Returns:
5th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoef7</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoef7(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getNlCoef7();
</MCode>
               </Code>
               <Description>Sets the 7th order non-linearity correction coefficient 

Parameters:
value - 7th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getNlCoefficients</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlCoefficients(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getNlCoefficients();
</MCode>
               </Code>
               <Description>Returns the all of the non-linearity correction coefficients. 

Returns:
an array of all non-linearity correction coefficients.
</Description>
            </Method>
            <Method>
               <Name>getNlOrder</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNlOrder(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlCoefficients();
</MCode>
               </Code>
               <Description>Returns the Polynomial order of non-linearity calibration coefficient. 

Returns:
1st order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>getStrayLight</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getStrayLight(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlCoefficients();
</MCode>
               </Code>
               <Description>Returns the Stray light constant. 

Returns:
the Stray light constant.
</Description>
            </Method>
            <Method>
               <Name>getStrayLightScope</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getStrayLightScope(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlCoefficients();
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getWlCoefficients</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWlCoefficients(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlCoefficients();
</MCode>
               </Code>
               <Description>Gets all of the wavelength calibration coefficients. 

Returns:
an array of the wavelength calibration coefficients.
</Description>
            </Method>
            <Method>
               <Name>getWlFirst</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWlFirst(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlFirst();
</MCode>
               </Code>
               <Description>Returns the 1st order wavelength calibration coefficient. 

Returns:
the 1st order wavelength calibration coefficient.
</Description>
            </Method>
            <Method>
               <Name>getWlIntercept</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWlIntercept(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlIntercept();
</MCode>
               </Code>
               <Description>Returns the 0th order wavelength calibration coefficient. 

Returns:
the 0th order wavelength calibration coefficient.
</Description>
            </Method>
            <Method>
               <Name>getWlSecond</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWlSecond(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlSecond();
</MCode>
               </Code>
               <Description>Sets the 2nd order wavelength calibration coefficient. 

Parameters:
value - the 2nd order wavelength calibration coefficient.
</Description>
            </Method>
            <Method>
               <Name>getWlThird</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWlThird(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

returnValue = driverData.Coefficients.getWlThird();
</MCode>
               </Code>
               <Description>Returns the 3rd order wavelength calibration coefficient. 

Returns:
the 3rd order wavelength calibration coefficient.
</Description>
            </Method>
            <Method>
               <Name>setNlCoef0</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef0(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef0(value);
</MCode>
               </Code>
               <Description>Sets the 0th order non-linearity correction coefficient 

Parameters:
value - 0th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef1</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef1(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef1(value);
</MCode>
               </Code>
               <Description>Sets the 1st order non-linearity correction coefficient 

Parameters:
value - 1st order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef2</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef2(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef2(value);
</MCode>
               </Code>
               <Description>Sets the 2nd order non-linearity correction coefficient 

Parameters:
value - 2nd order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef3</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef3(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef3(value);
</MCode>
               </Code>
               <Description>Sets the 3rd order non-linearity correction coefficient 

Parameters:
value - 3rd order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef4</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef4(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef4(value);
</MCode>
               </Code>
               <Description>Sets the 4th order non-linearity correction coefficient 

Parameters:
value - 4th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef5</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef5(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef5(value);
</MCode>
               </Code>
               <Description>Sets the 5th order non-linearity correction coefficient 

Parameters:
value - 5th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef6</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef6(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef6(value);
</MCode>
               </Code>
               <Description>Sets the 6th order non-linearity correction coefficient 

Parameters:
value - 6th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoef7</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoef7(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoef7(value);
</MCode>
               </Code>
               <Description>Sets the 7th order non-linearity correction coefficient 

Parameters:
value - 7th order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setNlCoefficients</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlCoefficients(obj, nl)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlCoefficients(nl);
</MCode>
               </Code>
               <Description>Sets all of the non-linearity correction coefficients. 

Parameters:
nl - an array of all of the non-linearity correction coefficients.
</Description>
            </Method>
            <Method>
               <Name>setNlOrder</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNlOrder(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setNlOrder(value);
</MCode>
               </Code>
               <Description>Sets the Polynomial order of non-linearity calibration coefficient 

Parameters:
value - 1st order non-linearity correction coefficient
</Description>
            </Method>
            <Method>
               <Name>setStrayLight</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setStrayLight(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setStrayLight(value);
</MCode>
               </Code>
               <Description>Sets the Stray light constant. 

Parameters:
value - Stray light constant.
</Description>
            </Method>
            <Method>
               <Name>setWlCoefficients</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWlCoefficients(obj, wl)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setWlCoefficients(wl);
</MCode>
               </Code>
               <Description>Sets all of the wavelength calibration coefficients. 

Parameters:
wl - an array of the wavelength calibration coefficients.
</Description>
            </Method>
            <Method>
               <Name>setWlFirst</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWlFirst(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setWlFirst(value);
</MCode>
               </Code>
               <Description>Sets the 1st order wavelength calibration coefficient. 

Parameters:
value - the 1st order wavelength calibration coefficient.
</Description>
            </Method>
            <Method>
               <Name>setWlIntercept</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWlIntercept(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setWlIntercept(value);
</MCode>
               </Code>
               <Description>Sets the 0th order wavelength calibration coefficient. 

Parameters:
value - the 0th order wavelength calibration coefficient.

</Description>
            </Method>
            <Method>
               <Name>setWlSecond</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWlSecond(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setWlSecond(value);
</MCode>
               </Code>
               <Description>Sets the 2nd order wavelength calibration coefficient. 

Parameters:
value - the 2nd order wavelength calibration coefficient.
</Description>
            </Method>
            <Method>
               <Name>setWlThird</Name>
               <Location>coefficients</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWlThird(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Cannot execute the method without an instance of the class.')) ;
end

driverData.Coefficients.setWlThird(value);
</MCode>
               </Code>
               <Description>Sets the 3rd order wavelength calibration coefficient. 

Parameters:
value - the 3rd order wavelength calibration coefficient.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>continuousstrobe</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ContinousStrobe1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>continuousStrobeCountsToMicros</Name>
               <Location>continuousstrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = continuousStrobeCountsToMicros(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerContinuousStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ContinuousStrobe');

returnValue = featureControllerContinuousStrobe.continuousStrobeCountsToMicros(counts);

</MCode>
               </Code>
               <Description>Converts the given number of counts to microseconds. 

Parameters:
counts - Integer number of counts to convert 
Returns:
corresponding number of microseconds
</Description>
            </Method>
            <Method>
               <Name>getContinuousStrobeDelay</Name>
               <Location>continuousstrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getContinuousStrobeDelay(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerContinuousStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ContinuousStrobe');

returnValue = featureControllerContinuousStrobe.getContinuousStrobeDelay();

</MCode>
               </Code>
               <Description>Get the currently set continuous strobe delay. Note that the device may not support reading this property directly, so a cached value or null may be returned. 

Returns:
Integer containing the continuous strobe delay in microseconds, or null if the state cannot be determined and setContinuousStrobeDelay has not yet been called.
</Description>
            </Method>
            <Method>
               <Name>getContinuousStrobeDelayIncrement</Name>
               <Location>continuousstrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getContinuousStrobeDelayIncrement(obj , spectrometerIndex, magnitude)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerContinuousStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ContinuousStrobe');

returnValue = featureControllerContinuousStrobe.getContinuousStrobeDelayIncrement(magnitude);

</MCode>
               </Code>
               <Description>Step size for strobe delay values, in microseconds. This is provided for SpinnerNumberModel support. 

Parameters:
magnitude - How large the current strobe delay is, in case that changes the minimum increment value 
Returns:
Step size, in microseconds, for the continuous strobe delay
</Description>
            </Method>
            <Method>
               <Name>getContinuousStrobeDelayMaximum</Name>
               <Location>continuousstrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getContinuousStrobeDelayMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerContinuousStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ContinuousStrobe');

returnValue = featureControllerContinuousStrobe.getContinuousStrobeDelayMaximum();

</MCode>
               </Code>
               <Description>Largest continuous strobe delay, in microseconds, that the device supports. 

Returns:
Maximum strobe delay in microseconds
</Description>
            </Method>
            <Method>
               <Name>getContinuousStrobeDelayMinimum</Name>
               <Location>continuousstrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getContinuousStrobeDelayMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerContinuousStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ContinuousStrobe');

returnValue = featureControllerContinuousStrobe.getContinuousStrobeDelayMinimum();

</MCode>
               </Code>
               <Description>Smallest continuous strobe delay, in microseconds, that the device supports. 

Returns:
Minimum strobe delay in microseconds
</Description>
            </Method>
            <Method>
               <Name>setContinuousStrobeDelay</Name>
               <Location>continuousstrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setContinuousStrobeDelay(obj , spectrometerIndex, durationOfPhase)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerContinuousStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ContinuousStrobe');

returnValue = featureControllerContinuousStrobe.setContinuousStrobeDelay(durationOfPhase);

</MCode>
               </Code>
               <Description>Set the delay (in microseconds) from the start of the integration period until we turn on the lamp for the first pulse. This value will also be used to specify the duration of each lamp-on pulse. Thus pulses will have a 50% duty cycle. The underlying commands are expected to be: 
•ADC1000: OP_CONTSTROBE (0x0C)
•HR2000+, HR4000: OP_FPGAWRITE (0x6A)

Parameters:
durationOfPhase - Specifies the duration of the lamp-off and lamp-on phases of each light pulse. When the integration period begins, the lamp will remain off for this length of time. Then the lamp will turn on for the same duration. This cycle of equal duration periods of lamp-off/lamp-on is then continued until the integration period has completed. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>currentout</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="CurrentOut1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>analogOutCountsToMilliamps</Name>
               <Location>currentout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = analogOutCountsToMilliamps(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerCurrentOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'CurrentOut');

returnValue = featureControllerCurrentOut.analogOutCountsToMilliamps(counts);

</MCode>
               </Code>
               <Description>Compute the approximate voltage that the DAC should output when set to a particular number of counts. 

Parameters:
counts - Number of counts to convert 
Returns:
Voltage (in volts) of the DAC for the given number of counts
</Description>
            </Method>
            <Method>
               <Name>getDACCounts</Name>
               <Location>currentout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACCounts(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerCurrentOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'CurrentOut');

returnValue = featureControllerCurrentOut.getDACCounts();

</MCode>
               </Code>
               <Description>Get the current number of counts being sent to the DAC. The underlying device may not support this operation directly, so the value may be indeterminate, and a cached value may be returned. 

Returns:
Integer containing the number of DAC counts, or null if the value is not known (as will be the case until getDACCounts() is first called).
</Description>
            </Method>
            <Method>
               <Name>getDACIncrement</Name>
               <Location>currentout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACIncrement(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerCurrentOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'CurrentOut');

returnValue = featureControllerCurrentOut.getDACIncrement();

</MCode>
               </Code>
               <Description>Get the step size for values that can be sent to getDACCounts(). This is intended to support SpinnerNumberModels. 

Returns:
Step size for counts
</Description>
            </Method>
            <Method>
               <Name>getDACMaximum</Name>
               <Location>currentout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerCurrentOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'CurrentOut');

returnValue = featureControllerCurrentOut.getDACMaximum();

</MCode>
               </Code>
               <Description>Get the smallest number of counts that can legally be sent to getDACCounts() 

Returns:
Number of counts
</Description>
            </Method>
            <Method>
               <Name>getDACMinimum</Name>
               <Location>currentout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDACMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerCurrentOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'CurrentOut');

returnValue = featureControllerCurrentOut.getDACMinimum();

</MCode>
               </Code>
               <Description>Get the smallest number of counts that can legally be sent to getDACCounts() 

Returns:
Number of counts
</Description>
            </Method>
            <Method>
               <Name>setDACCounts</Name>
               <Location>currentout</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDACCounts(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerCurrentOut = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'CurrentOut');

featureControllerCurrentOut.setDACCounts(counts);

</MCode>
               </Code>
               <Description>USB-LS450s can be ordered with an optional 4-20mA analog output. This command sets the analog output on a USB-LS450-4/20 or a USB-AOUT. The analog output value is a 16-bit value that is linearly scaled between 4 and 20mA.

Command the DAC to output at the specified level. The underlying commands are expected to be: 

•ADC1000: OP_DACWRITE (0x52)
•HR2000+, HR4000, QE65000: OP_PSOCWRITE (0x69)
•LS-450-AOUT: OP_SETDAVALUE (0x25)

Parameters:
counts - Number of counts to send to the DAC. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>detector</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Detector1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>Detector</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function Detector(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

driverData.Detector = com.oceanoptics.omnidriver.spectrometer.Detector();
set(deviceObj, 'DriverData', driverData);

returnValue = obj;</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getArrayCoatingMfg</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getArrayCoatingMfg(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = char(driverData.Detector.getArrayCoatingMfg());</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getArrayWavelength</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getArrayWavelength(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = char(driverData.Detector.getArrayWavelength());</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getSerialNumber</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSerialNumber(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = char(driverData.Detector.getSerialNumber());</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>isDefined</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isDefined(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.


deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Detector.isDefined();</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>isLensInstalled</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isLensInstalled(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Detector.isLensInstalled();</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setArrayCoatingMfg</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setArrayCoatingMfg(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Detector.setArrayCoatingMfg(value);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setArrayWavelength</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setArrayWavelength(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Detector.setArrayWavelength(value);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setLensInstalled</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setLensInstalled(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Detector.setLensInstalled(value);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setSerialNumber</Name>
               <Location>detector</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setSerialNumber(obj, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

if (isempty(driverData.Detector))
   error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Detector', 'Cannot execute the method without an instance of the class.'));    
end

returnValue = driverData.Detector.setSerialNumber(value);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>detectortemperature</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="DetectorTemerature1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getDetectorTemperatureCelsius</Name>
               <Location>detectortemperature</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDetectorTemperatureCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerDetectorTemperature = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'DetectorTemperature');

returnValue = featureControllerDetectorTemperature.getDetectorTemperatureCelsius();

</MCode>
               </Code>
               <Description>Reads the temperature of the spectrometer detector. 

Returns:
Returns a double with the measured temperature in Celsius 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>externaltemperature</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ExternalTemperature1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getExternalTemperatureCelsius</Name>
               <Location>externaltemperature</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTemperatureCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTemperature = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_USB_LS450_ExternalTemperature');

returnValue = featureControllerExternalTemperature.getExternalTemperatureCelsius();</MCode>
               </Code>
               <Description>Returns:
the current temperature reading from the probe, or 9999 if an IOException occurred. Since 9999 is well above the melting point of steel, our probe will melt before reporting this temperature.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>externaltriggerdelay</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ExternalTriggerDelay1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getExternalTriggerDelay</Name>
               <Location>externaltriggerdelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerDelay(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTriggerDelay = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ExternalTriggerDelay');

returnValue = featureControllerExternalTriggerDelay.getExternalTriggerDelay();

</MCode>
               </Code>
               <Description>Get the current trigger delay. This value may be cached, and not actually read from the device on every call. 

Returns:
Current number of counts of external trigger delay.

</Description>
            </Method>
            <Method>
               <Name>getExternalTriggerDelayIncrement</Name>
               <Location>externaltriggerdelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerDelayIncrement(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTriggerDelay = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ExternalTriggerDelay');

returnValue = featureControllerExternalTriggerDelay.getExternalTriggerDelayIncrement();

</MCode>
               </Code>
               <Description>Gets the allowed count step size for external trigger delays. This is intended for SpinnerNumberModel support. 

Returns:
Increment size for delay counts.
</Description>
            </Method>
            <Method>
               <Name>getExternalTriggerDelayMaximum</Name>
               <Location>externaltriggerdelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerDelayMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTriggerDelay = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ExternalTriggerDelay');

returnValue = featureControllerExternalTriggerDelay.getExternalTriggerDelayMaximum();

</MCode>
               </Code>
               <Description>Gets the largest allowed number of counts that the device supports. 

Returns:
maximum number of counts allowed.
</Description>
            </Method>
            <Method>
               <Name>getExternalTriggerDelayMinimum</Name>
               <Location>externaltriggerdelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerDelayMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTriggerDelay = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ExternalTriggerDelay');

returnValue = featureControllerExternalTriggerDelay.getExternalTriggerDelayMinimum();

</MCode>
               </Code>
               <Description>Gets the smallest allowed number of counts that the device supports. 

Returns:
the minimum number of counts allowed.
</Description>
            </Method>
            <Method>
               <Name>setExternalTriggerDelay</Name>
               <Location>externaltriggerdelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setExternalTriggerDelay(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTriggerDelay = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ExternalTriggerDelay');

featureControllerExternalTriggerDelay.setExternalTriggerDelay(counts);

</MCode>
               </Code>
               <Description>Command the device to use a new trigger delay, specified in microseconds. 

Parameters:
counts - Number of counts to delay external trigger. 
</Description>
            </Method>
            <Method>
               <Name>triggerDelayCountsToMicroseconds</Name>
               <Location>externaltriggerdelay</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = triggerDelayCountsToMicroseconds(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerExternalTriggerDelay = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ExternalTriggerDelay');

returnValue = featureControllerExternalTriggerDelay.triggerDelayCountsToMicroseconds(counts);

</MCode>
               </Code>
               <Description>Convert from the number of counts to the actual delay in microseconds. 

Parameters:
counts - Number of counts to represent as microseconds. 
Returns:
the delay, in microseconds, corresponding to given counts.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>gpio</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="GPIO1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getDirectionBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDirectionBits(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

returnValue = featureControllerGPIO.getDirectionBits();

</MCode>
               </Code>
               <Description>Reads the states of all direction bits and return them as a BitSet. The direction bits specify whether a particular pin is set as input (false) or output (true). 

Returns:
A BitSet with the direction bit states. The size of the BitSet reflects the total number of bits that the device supports. A pin is input if its corresponding bit is false, and output otherwise. 
</Description>
            </Method>
            <Method>
               <Name>getMuxBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getMuxBits(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

returnValue = featureControllerGPIO.getMuxBits();

</MCode>
               </Code>
               <Description>Reads the states of all alt function bits and returns them as a BitSet. 

Returns:
A BitSet with the alt function bit states. The size of the BitSet reflects the total number of bits that the device supports. 
</Description>
            </Method>
            <Method>
               <Name>getNumberOfPins</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfPins(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

returnValue = featureControllerGPIO.getNumberOfPins();

</MCode>
               </Code>
               <Description>Getter for the numberOfPins property. 

Returns:
the number of GPIO pins
</Description>
            </Method>
            <Method>
               <Name>getTotalGPIOBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getTotalGPIOBits(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

returnValue = featureControllerGPIO.getTotalGPIOBits();

</MCode>
               </Code>
               <Description>Gets the number of GPIO bits that the device supports. 

Returns:
Total number of GPIO bits
</Description>
            </Method>
            <Method>
               <Name>getValueBit</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getValueBit(obj , spectrometerIndex, bitNumber)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

returnValue = featureControllerGPIO.getValueBit(bitNumber);

</MCode>
               </Code>
               <Description>Parameters:
bit - Which bit to set. Must be between 0 and getTotalBits()-1, inclusive.
value - false for low, true for high 
</Description>
            </Method>
            <Method>
               <Name>getValueBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getValueBits(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

returnValue = featureControllerGPIO.getValueBits();

</MCode>
               </Code>
               <Description>Reads the states of all value bits and return them as a BitSet. The value bits correspond to pins that the user may connect to. 

Returns:
A BitSet with the value bit states. The size of the BitSet reflects the total number of bits that the device supports. 
</Description>
            </Method>
            <Method>
               <Name>setDirectionAllBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDirectionAllBits(obj , spectrometerIndex, bitSet)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setDirectionAllBits(bitSet);

</MCode>
               </Code>
               <Description>Asserts a new state for the GPIO direction bits. The direction bits determine if the corresponding pin is input (false) or output (true). 

Parameters:
bitSet - A BitSet containing the new state to push to the GPIO. Note that bits in excess of the number reported by getTotalBits() may be ignored. 
</Description>
            </Method>
            <Method>
               <Name>setDirectionBit</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDirectionBit(obj , spectrometerIndex, bit, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setDirectionBit(bit, value);

</MCode>
               </Code>
               <Description>Reads the states of all direction bits and return them as a BitSet. The direction bits specify whether a particular pin is set as input (false) or output (true). 

Returns:
A BitSet with the direction bit states. The size of the BitSet reflects the total number of bits that the device supports. A pin is input if its corresponding bit is false, and output otherwise. 
</Description>
            </Method>
            <Method>
               <Name>setDirectionBitmask</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDirectionBitmask(obj , spectrometerIndex, bitmask)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setDirectionBitmask(bitmask);

</MCode>
               </Code>
               <Description>Asserts a new state for the GPIO direction bits. The direction bits determine if the corresponding pin is input (false) or output (true). 

Parameters:
bitmask - An integer bitmask containing the new state to push to the GPIO. Note that bits in excess of the number reported by getTotalBits() may be ignored. 
</Description>
            </Method>
            <Method>
               <Name>setMuxAllBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setMuxAllBits(obj , spectrometerIndex, bitSet)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setMuxAllBits(bitSet);

</MCode>
               </Code>
               <Description>Asserts a new state for the GPIO alt function bits. 

Parameters:
bitSet - A BitSet containing the new state to push to the GPIO. Note that bits in excess of the number reported by getTotalBits() may be ignored.</Description>
            </Method>
            <Method>
               <Name>setMuxBit</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setMuxBit(obj , spectrometerIndex, bit, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setMuxBit(bit, value);

</MCode>
               </Code>
               <Description>Parameters:
bit - Which bit to set. Must be between 0 and getTotalBits()-1, inclusive.
value - false for low, true for high 
</Description>
            </Method>
            <Method>
               <Name>setMuxBitmask</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setMuxBitmask(obj , spectrometerIndex, bitmask)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setMuxBitmask(bitmask);

</MCode>
               </Code>
               <Description>Asserts a new state for the GPIO alt function bits. 

Parameters:
bitmask - An integer bitmask containing the new state to push to the GPIO. Note that bits in excess of the number reported by getTotalBits() may be ignored. 
</Description>
            </Method>
            <Method>
               <Name>setValueAllBits</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setValueAllBits(obj , spectrometerIndex, bitSet)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setValueAllBits(bitSet);

</MCode>
               </Code>
               <Description>Asserts a new state for the GPIO value bits. The value bits correspond to the pins available to the user. 

Parameters:
bitSet - A BitSet containing the new state to push to the GPIO. Note that bits in excess of the number reported by getTotalBits() may be ignored</Description>
            </Method>
            <Method>
               <Name>setValueBit</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setValueBit(obj , spectrometerIndex, bit, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setValueBit(bit, value);

</MCode>
               </Code>
               <Description>Reads the state of the specified GPIO bit. The GPIO bits correspond to pins that the user may connect to. 

Parameters:
bitNumber - A number 0-N specifying which GPIO bit to examine. 
Returns:
An integer value of 0 or 1, depending on the state of the specified bit. 
</Description>
            </Method>
            <Method>
               <Name>setValueBitmask</Name>
               <Location>gpio</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setValueBitmask(obj , spectrometerIndex, bitmask)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerGPIO = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'GPIO');

featureControllerGPIO.setValueBitmask(bitmask);

</MCode>
               </Code>
               <Description>Asserts a new state for the GPIO value bits. The value bits correspond to the pins available to the user. 

Parameters:
bitmask - An integer bitmask containing the new state to push to the GPIO. Note that bits in excess of the number reported by getTotalBits() may be ignored. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>hardwaretrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="HardwareTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getExternalTriggerMode</Name>
               <Location>hardwaretrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerMode(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHardwareTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HardwareTrigger');

returnValue = featureControllerHardwareTrigger.getExternalTriggerMode();

</MCode>
               </Code>
               <Description>Gets the external trigger mode of the spectrometer. Possible return values include None (free running), Software (integration time controlled by software settings), Synchronization (integration time controlled by frequency of triggers), and Hardware (hardware fixed or jumpered integration time). 

Returns:
The external trigger mode of the spectrometer
</Description>
            </Method>
            <Method>
               <Name>getExternalTriggerModes</Name>
               <Location>hardwaretrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExternalTriggerModes(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHardwareTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HardwareTrigger');

returnValue = featureControllerHardwareTrigger.getExternalTriggerModes();

</MCode>
               </Code>
               <Description>Get the external trigger modes supported by the device. The trigger modes are wrapped to conveniently allow integration into a JComboBox but without losing track of what the underlying device mode is. 

Returns:
The options for the external trigger mode of the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>sendSimulatedTriggerSignal</Name>
               <Location>hardwaretrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = sendSimulatedTriggerSignal(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHardwareTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HardwareTrigger');

returnValue = featureControllerHardwareTrigger.sendSimulatedTriggerSignal();

</MCode>
               </Code>
               <Description>Cause the spectrometer to react as if it had just received a bona-fide external hardware trigger signal. 
As of February 2012, only the STS implements this capability. 


</Description>
            </Method>
            <Method>
               <Name>setExternalTriggerMode</Name>
               <Location>hardwaretrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setExternalTriggerMode(obj , spectrometerIndex, mode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHardwareTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HardwareTrigger');

featureControllerHardwareTrigger.setExternalTriggerMode(mode);

</MCode>
               </Code>
               <Description>Sets the external trigger mode of the spectrometer. Available options include None (free running), Software (integration time controlled by software settings), Synchronization (integration time controlled by frequency of triggers), and Hardware (hardware fixed or jumpered integration time). 

Parameters:
mode - 0 -&gt; Normal (Free running) Mode 
 1 -&gt; Software Trigger Mode 
 2 -&gt; External Synchronization Trigger Mode 
 3 -&gt; External Hardware Trigger Mode 
 4 -&gt; Internal Single Shot Trigger Mode (QE65000 only) 

</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>highgainmode</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="HighGainMode1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getHighGainDefault</Name>
               <Location>highgainmode</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getHighGainDefault(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHighGainMode = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HighGainMode');

returnValue = featureControllerHighGainMode.getHighGainDefault();

</MCode>
               </Code>
               <Description>Obtains the High Gain Mode default from the spectrometer. 

Returns:
true if the default is on; false if the default is off 
</Description>
            </Method>
            <Method>
               <Name>hasHighGainDefault</Name>
               <Location>highgainmode</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = hasHighGainDefault(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHighGainMode = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HighGainMode');

returnValue = featureControllerHighGainMode.hasHighGainDefault();

</MCode>
               </Code>
               <Description>Denotes whether or not the device has the ability to set a default state for High Gain Mode. 

Returns:
true if the device can set a default high gain mode state, false otherwise.
</Description>
            </Method>
            <Method>
               <Name>setHighGain</Name>
               <Location>highgainmode</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setHighGain(obj , spectrometerIndex, gain)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHighGainMode = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HighGainMode');

featureControllerHighGainMode.setHighGain(gain);

</MCode>
               </Code>
               <Description>Sets the device either into or out of high gain mode. 

Parameters:
gain - boolean denoting whether to put the device into high gain mode; true will put the device into high gain mode, false will take the device out of high gain mode.</Description>
            </Method>
            <Method>
               <Name>setHighGainDefault</Name>
               <Location>highgainmode</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setHighGainDefault(obj , spectrometerIndex, gain)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerHighGainMode = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'HighGainMode');

featureControllerHighGainMode.setHighGainDefault(gain);

</MCode>
               </Code>
               <Description>Sets the default state for High Gain Mode. 

Parameters:
gain - new default state for High Gain Mode; true will put the device in High Gain Mode by default; false will not put the device in High Gain Mode. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>highspdacq</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="HighSpdAcq1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>AllocateBuffer</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function AllocateBuffer(obj, spectrometerIndex, numberOfSpectra)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
driverData.Wrapper.highSpdAcq_AllocateBuffer(spectrometerIndex, numberOfSpectra);
</MCode>
               </Code>
               <Description>This method should only be used for high speed spectrum acquisition. 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
numberOfSpectra - Allocate enough buffer space to accomodate this many spectra.

</Description>
            </Method>
            <Method>
               <Name>GetNumberOfSpectraAcquired</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = GetNumberOfSpectraAcquired(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
returnValue = driverData.Wrapper.highSpdAcq_GetNumberOfSpectraAcquired();
</MCode>
               </Code>
               <Description>This method should only be used for high speed spectrum acquisition. 

Returns:
the number of spectra acquired during the most recent call to highSpdAcq_StartAcquisition().</Description>
            </Method>
            <Method>
               <Name>GetSpectrum</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = GetSpectrum(obj, spectrumNumber)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
returnValue = driverData.Wrapper.highSpdAcq_GetSpectrum(spectrumNumber);
</MCode>
               </Code>
               <Description>This method should only be used for high speed spectrum acquisition. 

Parameters:
spectrumNumber - (0-n) index into our array of acquired spectra. 
Returns:
a double[] array containing the raw pixel values for one acquired spectrum. Returns null if no spectra have been acquired yet (via high speed acquisition) or if fewer spectra have been acquired than the spectrumNumber you specified.
</Description>
            </Method>
            <Method>
               <Name>GetTimeStamp</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = GetTimeStamp(obj, spectrumNumber)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
returnValue = driverData.Wrapper.highSpdAcq_GetTimeStamp(spectrumNumber);
</MCode>
               </Code>
               <Description>This method should only be used for high speed spectrum acquisition. 

Parameters:
spectrumNumber - (0-n) index into our array of time stamps. 
Returns:
a HighResTimeStamp object representing the time at which the specified spectrum was acquired. Returns null if no spectra have been acquired yet (via high speed acquisition) or if fewer spectra have been acquired than the spectrumNumber you specified.
</Description>
            </Method>
            <Method>
               <Name>IsSaturated</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = IsSaturated(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
returnValue = driverData.Wrapper.highSpdAcq_IsSaturated(spectrometerIndex);
</MCode>
               </Code>
               <Description>This method should only be used for high speed spectrum acquisition. 

Parameters:
spectrumNumber - (0-n) index into our array of "saturated" flags. 
Returns:
a boolean value indicating if the corresponding spectrum was saturated. Returns true if no spectra have been acquired yet (via high speed acquisition) or if fewer spectra have been acquired than the spectrumNumber you specified.
</Description>
            </Method>
            <Method>
               <Name>StartAcquisition</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function StartAcquisition(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
driverData.Wrapper.highSpdAcq_StartAcquisition(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>High speed spectrum acquisition. 
This method will not return until either the specified number of spectra have been acquired, or highSpdAcq_StopAcquisition() has been called. The user is responsible for setting up and using multiple threads if they plan on using the highSpdAcq_StopAcquisition() method. Multiple threads are not required if the user simply wishes to collect a fixed number of spectra. 


Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers.
channelIndex - (0-n) specifies which channel of a multichannel spectrometer to control.
</Description>
            </Method>
            <Method>
               <Name>StopAcquisition</Name>
               <Location>highspdacq</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function StopAcquisition(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');
driverData.Wrapper.highSpdAcq_StopAcquisition();
</MCode>
               </Code>
               <Description>This method should only be used for high speed spectrum acquisition. 
This will cause high-speed acquisition to stop as soon as the current spectrum is acquired. When you call this method, it will cause the highSpdAcq_StartAcquisition() method to return as soon as the current spectrum has been acquired, even if this results in fewer spectra being acquired than you originally specified when you called the highSpdAcq_AllocateBuffer() method. 

Important:This method must be called from a different thread than the highSpdAcq_StartAcquisition() method. Once you have called highSpdAcq_StartAcquisition(), the thread in which highSpdAcq_StartAcquisition() has been called will be blocked because highSpdAcq_StartAcquisition() will not return until the specified number of spectra have been acquired. 


</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>i2cbus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="I2CBus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getI2CBytes</Name>
               <Location>i2cbus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getI2CBytes(obj , spectrometerIndex, address, numBytes)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerI2CBus = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'I2CBus');

returnValue = featureControllerI2CBus.getI2CBytes(address, numBytes);

</MCode>
               </Code>
               <Description>Performs a general purpose read on the I2C pins for interfacing to attached peripherals. The time to complete the command is determined by the amount of data transferred and the response time of the peripheral. The I2C bus runs at 400KHz. The maximum number of bytes that can be read is 61. 

Parameters:
address - The I2C address of the attached peripheral
numBytes - The number of bytes that will be transferred from the peripheral (max is 61) 
Returns:
Array of bytes containing the read data. May be null. 
</Description>
            </Method>
            <Method>
               <Name>setI2CBytes</Name>
               <Location>i2cbus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setI2CBytes(obj , spectrometerIndex, address, numBytes, i2c)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerI2CBus = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'I2CBus');

returnValue = featureControllerI2CBus.setI2CBytes(address, numBytes, i2c);

</MCode>
               </Code>
               <Description>Performs a general-purpose write on the I2C pins for interfacing to attached peripherals. The time to complete the command is determined by the amount of data transferred and the response time of the peripheral. The I2C bus runs at 400KHz. 

Parameters:
address - The I2C address of the attached peripheral
numBytes - The number of bytes that will be transferred to the peripheral (max is 61)
i2C - A byte array containing the data to be written to the I2C peripheral 
Returns:
The result of the write to the I2C. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>indy</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Indy1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getCurrentOutputCalibration20mA</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCurrentOutputCalibration20mA(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getCurrentOutputCalibration20mA(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access. 
Returns:
the integer value corresponding to the 20ma state of this pin. 
</Description>
            </Method>
            <Method>
               <Name>getCurrentOutputCalibration4mA</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCurrentOutputCalibration4mA(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getCurrentOutputCalibration4mA(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access. 
Returns:
the integer value corresponding to the 4ma state of this pin. 
</Description>
            </Method>
            <Method>
               <Name>getCurrentOutputEnables</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCurrentOutputEnables(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getCurrentOutputEnables(moduleIndex);

</MCode>
               </Code>
               <Description>Read the state of the current output enable flags. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
an array of booleans indicating the enable/disable state of each current output pin. A value of "true" indicates the corresponding current output pin is enabled. 
</Description>
            </Method>
            <Method>
               <Name>getCurrentOutputEnergized</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCurrentOutputEnergized(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getCurrentOutputEnergized(moduleIndex);

</MCode>
               </Code>
               <Description>Read the state of the current output "energize" flags. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
an array of booleans indicating the "energized" state of each current output pin. A value of "true" indicates the corresponding current output pin is energized. 
</Description>
            </Method>
            <Method>
               <Name>getCurrentOutputMaximumCounts</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCurrentOutputMaximumCounts(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getCurrentOutputMaximumCounts(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current output channel to access. 
Returns:
the maximum allowed value to which this current output may be set. 
</Description>
            </Method>
            <Method>
               <Name>getCurrentOutputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCurrentOutputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getCurrentOutputs(moduleIndex);

</MCode>
               </Code>
               <Description>Sample the current output pins. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
an array of sample values 
</Description>
            </Method>
            <Method>
               <Name>getExcitationEnable</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExcitationEnable(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getExcitationEnable(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which excitation source to access. 
Currently, the Indy has only one excitation source, so this parameter should always be set to 0. 
Returns:
"true" if this excitation source has been enabled. Else return "false". 
</Description>
            </Method>
            <Method>
               <Name>getExcitationVoltage</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExcitationVoltage(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getExcitationVoltage(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which excitation source to access. 
Currently, the Indy has only one excitation source, so this parameter should always be set to 0. 
Returns:
either 10.0 or 20.0 (units: volts) 
</Description>
            </Method>
            <Method>
               <Name>getExcitationVoltageOptions</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getExcitationVoltageOptions(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getExcitationVoltageOptions(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which excitation source to access. 
Currently, the Indy has only one excitation source, so this parameter should always be set to 0. 
Returns:
an array containing every permissible voltage value supported by this excitation source (e.g. {10.0f, 20.0f} ).
</Description>
            </Method>
            <Method>
               <Name>getIndyGPIOInputValues</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getIndyGPIOInputValues(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getIndyGPIOInputValues(moduleIndex);

</MCode>
               </Code>
               <Description>Read the input state of all GPIO pins. 
Remember you must set the output-enable state to "false" for each GPIO pin you wish to use as an input. 


Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the current state of all GPIO (aka digital I/O) pins. 
Bit 0 of the returned value corresponds to GPIO pin 0. 
Bit 1 of the returned value corresponds to GPIO pin 1. And so forth. 
</Description>
            </Method>
            <Method>
               <Name>getIndyGPIOOutputEnables</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getIndyGPIOOutputEnables(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getIndyGPIOOutputEnables(moduleIndex);

</MCode>
               </Code>
               <Description>Read the input/output direction for all of the GPIO pins. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the "direction" all GPIO (aka digital I/O) pins. 
A value of "true" indicates the corresponding pin has been set to "output" mode. 
Bit 0 of the returned value corresponds to GPIO pin 0. 
Bit 1 of the returned value corresponds to GPIO pin 1. And so forth. 
</Description>
            </Method>
            <Method>
               <Name>getIndyGPIOOutputValues</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getIndyGPIOOutputValues(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getIndyGPIOOutputValues(moduleIndex);

</MCode>
               </Code>
               <Description>Read the output state of all GPIO pins. 
Remember you must set the output-enable state to "true" for each GPIO pin you wish to use as an output. 


Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the current output state of all GPIO (aka digital I/O) pins. 
Bit 0 of the returned value corresponds to GPIO pin 0. 
Bit 1 of the returned value corresponds to GPIO pin 1. And so forth.</Description>
            </Method>
            <Method>
               <Name>getNumberOfCurrentInputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfCurrentInputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getNumberOfCurrentInputs(moduleIndex);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the number of current inputs available on this Indy module. 
</Description>
            </Method>
            <Method>
               <Name>getNumberOfCurrentOutputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfCurrentOutputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getNumberOfCurrentOutputs(moduleIndex);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the number of current outputs available on this Indy module. 
</Description>
            </Method>
            <Method>
               <Name>getNumberOfIndyGPIO</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfIndyGPIO(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getNumberOfIndyGPIO(moduleIndex);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the number of digital input/output pins available on this Indy module. "GPIO" stands for "general purpose I/O". 
</Description>
            </Method>
            <Method>
               <Name>getNumberOfIndyModules</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfIndyModules(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getNumberOfIndyModules();

</MCode>
               </Code>
               <Description>Returns:
the number of Indy modules attached to this JAZ unit. 
</Description>
            </Method>
            <Method>
               <Name>getNumberOfVoltageInputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfVoltageInputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getNumberOfVoltageInputs(moduleIndex);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the number of voltage inputs available on this Indy module. 
</Description>
            </Method>
            <Method>
               <Name>getNumberOfVoltageOutputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfVoltageOutputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getNumberOfVoltageOutputs(moduleIndex);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
the number of voltage outputs available on this Indy module</Description>
            </Method>
            <Method>
               <Name>getVoltageOutputMaximumCounts</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getVoltageOutputMaximumCounts(obj , spectrometerIndex, moduleIndex, channel)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getVoltageOutputMaximumCounts(moduleIndex, channel);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which voltage output channel to access. 
Returns:
the maximum allowed value to which this voltage output may be set. 
</Description>
            </Method>
            <Method>
               <Name>getVoltageOutputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getVoltageOutputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.getVoltageOutputs(moduleIndex);

</MCode>
               </Code>
               <Description>Sample the voltage output pins. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
an array of sample values 
</Description>
            </Method>
            <Method>
               <Name>sampleCurrentInputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = sampleCurrentInputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.sampleCurrentInputs(moduleIndex);

</MCode>
               </Code>
               <Description>Sample the current input pins. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
an array of sample values 
</Description>
            </Method>
            <Method>
               <Name>sampleVoltageInputs</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = sampleVoltageInputs(obj , spectrometerIndex, moduleIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

returnValue = featureControllerIndy.sampleVoltageInputs(moduleIndex);

</MCode>
               </Code>
               <Description>Sample the voltage input pins. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access. 
Returns:
an array of sample values 
</Description>
            </Method>
            <Method>
               <Name>setCurrentOutputCalibration20mA</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCurrentOutputCalibration20mA(obj , spectrometerIndex, moduleIndex, channel, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setCurrentOutputCalibration20mA(moduleIndex, channel, counts);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access.
counts - the integer value that will represent the 20mA level for this current-output pin. 
</Description>
            </Method>
            <Method>
               <Name>setCurrentOutputCalibration4mA</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCurrentOutputCalibration4mA(obj , spectrometerIndex, moduleIndex, channel, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setCurrentOutputCalibration4mA(moduleIndex, channel, counts);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access.
counts - the integer value that will represent the 4mA level for this current-output pin. 
</Description>
            </Method>
            <Method>
               <Name>setCurrentOutputCounts</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCurrentOutputCounts(obj , spectrometerIndex, moduleIndex, channel, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setCurrentOutputCounts(moduleIndex, channel, counts);

</MCode>
               </Code>
               <Description>You must call setCurrentOutputCalibration4mA() and setCurrentOutputCalibration20mA() before invoking this method. These two methods establish the "count" values to be associated with the lower (4mA) and upper (20mA) current range. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access.
counts - Set the current level for the specified pin according to the calibration you previously specified. 
</Description>
            </Method>
            <Method>
               <Name>setCurrentOutputEnable</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCurrentOutputEnable(obj , spectrometerIndex, moduleIndex, channel, enabled)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setCurrentOutputEnable(moduleIndex, channel, enabled);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access.
enabled - a boolean flag which if "true" will enable the corresponding current-output pin. 
</Description>
            </Method>
            <Method>
               <Name>setCurrentOutputMilliamps</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCurrentOutputMilliamps(obj , spectrometerIndex, moduleIndex, channel, milliamps)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setCurrentOutputMilliamps(moduleIndex, channel, milliamps);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which current-output pin to access.
milliamps - The current value, in milliamps, to set on this pin. 
</Description>
            </Method>
            <Method>
               <Name>setExcitationEnable</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setExcitationEnable(obj , spectrometerIndex, moduleIndex, channel, enabled)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setExcitationEnable(moduleIndex, channel, enabled);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which excitation source to access. 
Currently, the Indy has only one excitation source, so this parameter should always be set to 0.
enabled - set to "true" to enable this excitation source. 
</Description>
            </Method>
            <Method>
               <Name>setExcitationVoltage</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setExcitationVoltage(obj , spectrometerIndex, moduleIndex, channel, volts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setExcitationVoltage(moduleIndex, channel, volts);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which excitation source to access. 
Currently, the Indy has only one excitation source, so this parameter should always be set to 0.
volts - one of the supported voltage levels. Call the getExcitationVoltageOptions() method to obtain an array of allowed values for this parameter. Currently we support only 10.0 volts or 20.0 volts. 
</Description>
            </Method>
            <Method>
               <Name>setIndyGPIOConfiguration</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setIndyGPIOConfiguration(obj , spectrometerIndex, moduleIndex, outputValueVector, enableVector, mask)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setIndyGPIOConfiguration(moduleIndex, outputValueVector, enableVector, mask);

</MCode>
               </Code>
               <Description>Set the input/output direction of GPIO (aka digital I/O) pins and simultaneously set the output state (high/low) of selected pins. 

Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
outputValueVector - specifies the high/low voltage state of the output pins
enableVector - specifies which pins are output and which pins are input. A bit value of "1" indicates the corresponding pin should be used as output.
mask - specifies which pins will be affected by this command. If a mask bit is "0", the corresponding pin will not be affected by this command. If a mask bit is "1", the corresponding pin will have its input/output direction set and, for output pins, the output voltage state will also be set, per the value of the corresponding bit in the outputValueVector. 
</Description>
            </Method>
            <Method>
               <Name>setIndyGPIOOutputValues</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setIndyGPIOOutputValues(obj , spectrometerIndex, moduleIndex, outputValueVector, mask)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setIndyGPIOOutputValues(moduleIndex, outputValueVector, mask);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
outputValueVector - specifies the high/low voltage state of the output pins
mask - specifies which pins will be affected by this command. If a mask bit is "0", the corresponding pin will not be affected by this command. If a mask bit is "1", the corresponding pin will have its output voltage state set. 
</Description>
            </Method>
            <Method>
               <Name>setVoltageOutputCounts</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setVoltageOutputCounts(obj , spectrometerIndex, moduleIndex, channel, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setVoltageOutputCounts(moduleIndex, channel, counts);

</MCode>
               </Code>
               <Description>Set the voltage-output level based on a "count" range. 
You should call getVoltageOutputMaximumCounts() to determine the maximum allowed "count" value for this voltage-output pin. 


Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which voltage-output pin to access.
counts - set the voltage level to the voltage that corresponds to this value. The allowed range of count is 
0 &lt;= count &lt;= getVoltageOutputMaximumCounts() 
The actual voltage level will be proportional to the "count" value. 
</Description>
            </Method>
            <Method>
               <Name>setVoltageOutputVolts</Name>
               <Location>indy</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setVoltageOutputVolts(obj , spectrometerIndex, moduleIndex, channel, volts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIndy = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Indy');

featureControllerIndy.setVoltageOutputVolts(moduleIndex, channel, volts);

</MCode>
               </Code>
               <Description>Parameters:
moduleIndex - 0-n; specifies which Indy module to access.
channel - 0-n; specifies which voltage-output pin to access.
volts - the voltage level to set this voltage-out pin to 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>internaltrigger</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InternalTrigger1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getInternalTriggerPeriodIncrement</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getInternalTriggerPeriodIncrement(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

returnValue = featureControllerInternalTrigger.getInternalTriggerPeriodIncrement();

</MCode>
               </Code>
               <Description>Get the step size for the internal trigger period in units of microseconds. </Description>
            </Method>
            <Method>
               <Name>getInternalTriggerPeriodMaximum</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getInternalTriggerPeriodMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

returnValue = featureControllerInternalTrigger.getInternalTriggerPeriodMaximum();

</MCode>
               </Code>
               <Description>Get the maximum allowed value for the internal trigger period in units of microseconds. </Description>
            </Method>
            <Method>
               <Name>getInternalTriggerPeriodMicros</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getInternalTriggerPeriodMicros(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

returnValue = featureControllerInternalTrigger.getInternalTriggerPeriodMicros();

</MCode>
               </Code>
               <Description>Get the last configured internal trigger period. 

Returns:
the internal trigger period (in microseconds), or -1 if this setting is unknown.
</Description>
            </Method>
            <Method>
               <Name>getInternalTriggerPeriodMinimum</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getInternalTriggerPeriodMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

returnValue = featureControllerInternalTrigger.getInternalTriggerPeriodMinimum();

</MCode>
               </Code>
               <Description>Get the minimum allowed value for the internal trigger period in units of microseconds. </Description>
            </Method>
            <Method>
               <Name>getTriggerSource</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getTriggerSource(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

returnValue = featureControllerInternalTrigger.getTriggerSource();</MCode>
               </Code>
               <Description>Gets the trigger source. 
The following codes are valid: 
0 = external 
1 = logic zero 
2 = logic one 
3 = internal 
</Description>
            </Method>
            <Method>
               <Name>setInternalTriggerPeriodMicros</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setInternalTriggerPeriodMicros(obj , spectrometerIndex, microseconds)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

featureControllerInternalTrigger.setInternalTriggerPeriodMicros(microseconds);</MCode>
               </Code>
               <Description>Set the period of the internal trigger generator (specified in microseconds). 

Parameters:
microseconds - 
Returns:
If successful, we return the value specified by the "microseconds" parameter. If an error occurred (IOException), we return -1.
</Description>
            </Method>
            <Method>
               <Name>setTriggerSource</Name>
               <Location>internaltrigger</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setTriggerSource(obj , spectrometerIndex, triggerSourceCode)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerInternalTrigger = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'InternalTrigger');

featureControllerInternalTrigger.setTriggerSource(triggerSourceCode);</MCode>
               </Code>
               <Description>Sets the trigger source. 

Parameters:
triggerSourceCode - Allowed values: 
0 = external 
1 = logic zero 
2 = logic one 
3 = internal 
Returns:
0 if successful, -1 if error occurred (invalid triggerSource or IOException)
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>irradiancecalibrationfactor</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="IrradianceCalibrationFactor1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getCollectionArea</Name>
               <Location>irradiancecalibrationfactor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getCollectionArea(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIrradianceCalibrationFactor = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'IrradianceCalibrationFactor');

returnValue = featureControllerIrradianceCalibrationFactor.getCollectionArea();

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getIrradianceCalibrationFactors</Name>
               <Location>irradiancecalibrationfactor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getIrradianceCalibrationFactors(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIrradianceCalibrationFactor = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'IrradianceCalibrationFactor');

returnValue = featureControllerIrradianceCalibrationFactor.getIrradianceCalibrationFactors();

</MCode>
               </Code>
               <Description>Reads all stored irradiance calibration factors from the device. 

Returns:
import The data received from the device 
</Description>
            </Method>
            <Method>
               <Name>hasCollectionArea</Name>
               <Location>irradiancecalibrationfactor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = hasCollectionArea(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIrradianceCalibrationFactor = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'IrradianceCalibrationFactor');

returnValue = featureControllerIrradianceCalibrationFactor.hasCollectionArea();

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setCollectionArea</Name>
               <Location>irradiancecalibrationfactor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setCollectionArea(obj , spectrometerIndex, area)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIrradianceCalibrationFactor = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'IrradianceCalibrationFactor');

featureControllerIrradianceCalibrationFactor.setCollectionArea(area);

</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setIrradianceCalibrationFactors</Name>
               <Location>irradiancecalibrationfactor</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setIrradianceCalibrationFactors(obj , spectrometerIndex, data)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerIrradianceCalibrationFactor = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'IrradianceCalibrationFactor');

featureControllerIrradianceCalibrationFactor.setIrradianceCalibrationFactors(data);</MCode>
               </Code>
               <Description>Writes irradiance calibration to the device. 

Parameters:
data - The data to be written to the desired EEPROM memory address 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>ls450</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="LS4501" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getAllLS450Info</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getAllLS450Info(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

returnValue = featureControllerLS450.getAllLS450Info();

</MCode>
               </Code>
               <Description>Gets all of the 22 stored spectrometer configuration variables from internal RAM. 

Returns:
the LS450Coefficients object that contains the calibration constants of the LS450. 
</Description>
            </Method>
            <Method>
               <Name>getLS450Coefficients</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLS450Coefficients(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

returnValue = featureControllerLS450.getLS450Coefficients();

</MCode>
               </Code>
               <Description>Gets an array containing the 19 calibration coefficients for the LS450. This method gets the object only and does not read from the LS450, Equivalent to the "Load Button" Calls getInfo, which returns a String for each constant. 

Returns:
returns the LS450Coefficients object that contains the calibration constants of the LS450.
</Description>
            </Method>
            <Method>
               <Name>getLS450Info</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLS450Info(obj , spectrometerIndex, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

returnValue = char(featureControllerLS450.getLS450Info(index));

</MCode>
               </Code>
               <Description>Queries any of the 22 stored spectrometer configuration variables. 

Parameters:
index - The configuration index of the stored spectrometer variables. 
Returns:
The data returned from the Query request. 
</Description>
            </Method>
            <Method>
               <Name>getO2ProbeCalibrationCoefficients</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getO2ProbeCalibrationCoefficients(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

returnValue = featureControllerLS450.getO2ProbeCalibrationCoefficients();

</MCode>
               </Code>
               <Description>Gets the O2 probe calibration coefficients. These will be lost when the program exits unless they are subsequently written with setLS450Coefficients(). 

Returns:
O2 probe calibration coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>loadInfo</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadInfo(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.loadInfo();

</MCode>
               </Code>
               <Description>This command instructs the microcontroller to read the calibration coefficients from the USB-LS450 and store them in internal volatile memory. </Description>
            </Method>
            <Method>
               <Name>loadLS450CoefficientsFromEEPROM</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadLS450CoefficientsFromEEPROM(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.loadLS450CoefficientsFromEEPROM();

</MCode>
               </Code>
               <Description>This command calls loadInfo, which instructs the microcontroller to read the calibration coefficients from the USB-LS450 and store them in internal volatile memory. Then volatile memory is read in by calling getLS450Info and load all cariables into an LS450Coefficient object. This method should be called when the user wishes to reset the variables that are stored in the LS450 RAM (volatile memory). After this method is called, getLS450Coefficients will return the reset object. </Description>
            </Method>
            <Method>
               <Name>saveInfo</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function saveInfo(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.saveInfo();

</MCode>
               </Code>
               <Description>This command instructs the microcontroller to write the calibration coefficients to the EEPROM on the USB-LS450. This command requires 3.5 seconds to complete, during this time no other commands should be sent to the USB2000. </Description>
            </Method>
            <Method>
               <Name>setAllLS450Info</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setAllLS450Info(obj , spectrometerIndex, ls450Coefficients)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.setAllLS450Info(ls450Coefficients);

</MCode>
               </Code>
               <Description>Writes all of the 22 stored spectrometer configuration variables to internal RAM. This information is lost when power is turned off. To save all the coefficients to the LS450 call this method, then call saveInfo which write the stored calibration in volatile memory to EEPROM. 

Parameters:
ls450Coefficients - the LS450Coefficients object that contains the calibration constants of the LS450. 
</Description>
            </Method>
            <Method>
               <Name>setLEDMode</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setLEDMode(obj , spectrometerIndex, pulsed)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.setLEDMode(pulsed);

</MCode>
               </Code>
               <Description>Sets the LED to either CW or pulsed operation. The Pulse rate of the LED is determined by the Continuous Strobe signal from the USB2000. Typically this rate is 976Hz. The LED is also Enabled/Disabled by the Lamp/Strobe Enable command/signal. 
0 -- CW Mode 
!0 -- pulsed Mode 


Parameters:
pulsed - a boolean value to set to pulsed operation.</Description>
            </Method>
            <Method>
               <Name>setLS450Coefficients</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setLS450Coefficients(obj , spectrometerIndex, ls450Coefficients)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.setLS450Coefficients(ls450Coefficients);

</MCode>
               </Code>
               <Description>Sets the array containing the 19 calibration coefficients for the LS450. This method sets the object only and does not write back to the LS450, Equivalent to the "Apply Button" Calls getInfo, which returns a String for each constant. the calibration constants of the LS450. 

Parameters:
ls450Coefficients - the new array containing the 19 calibration coefficients for the LS450
</Description>
            </Method>
            <Method>
               <Name>setLS450Info</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setLS450Info(obj , spectrometerIndex, index, str)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.setLS450Info(index, str);

</MCode>
               </Code>
               <Description>Writes any of the 22 stored spectrometer configuration variables to internal RAM. The 22 configuration variables are indexed as described in the Query Calibration Constants. The information to be stored is transferred as ASCII information. This information is lost when power is turned off. To save the coefficients to the LS450 call setAllLS450Info method, then call saveInfo which write the stored calibration in volatile memory to EEPROM. 

Parameters:
index - The configuration index of the stored spectrometer variables.
str - The data to be written to the configuration variable 
</Description>
            </Method>
            <Method>
               <Name>setO2ProbeCalibrationCoefficients</Name>
               <Location>ls450</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setO2ProbeCalibrationCoefficients(obj , spectrometerIndex, coefficients)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerLS450 = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'LS450');

featureControllerLS450.setO2ProbeCalibrationCoefficients(coefficients);

</MCode>
               </Code>
               <Description>Sets the O2 probe calibration coefficients. These will be lost when the program exits unless they are subsequently written with setLS450Coefficients(). 

Parameters:
coefficients - O2 probe calibration coefficients stored within the spectrometer.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>nonlinearitycorrectionprovider</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="NonlinearityCorrectionProvider1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getNonlinearityCoefficients</Name>
               <Location>nonlinearitycorrectionprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNonlinearityCoefficients(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerNonlinearityCorrectionProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'NonlinearityCorrectionProvider');

coefficientArray = featureControllerNonlinearityCorrectionProvider.getNonlinearityCoefficients();

if (coefficientArray.length &gt; 1)
      error('instrument:oceanoptics:arrayNotSupported', 'Object array not supported');    
end

driverData.Coefficients = coefficientArray(1);
set(deviceObj, 'DriverData', driverData);
returnValue = get(deviceObj, 'Coefficients');
</MCode>
               </Code>
               <Description>Gets the non-linearity coefficients that the software will use for its calculations. These will be lost when the program exits unless they are subsequently written with writeNonlinearityCoefficientsToSpectrometer(). 

Returns:
Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>getNonlinearityCoefficientsSingleChannel</Name>
               <Location>nonlinearitycorrectionprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNonlinearityCoefficientsSingleChannel(obj , spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerNonlinearityCorrectionProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'NonlinearityCorrectionProvider');

returnValue = featureControllerNonlinearityCorrectionProvider.getNonlinearityCoefficientsSingleChannel(channelIndex);

</MCode>
               </Code>
               <Description>Gets the nonlinearity values stored in the spectrometer's Coefficients. 

Parameters:
channelIndex - 
Returns:
an array of doubles containing the nonlinearity values.
</Description>
            </Method>
            <Method>
               <Name>readNonlinearityCoefficientsFromSpectrometer</Name>
               <Location>nonlinearitycorrectionprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = readNonlinearityCoefficientsFromSpectrometer(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerNonlinearityCorrectionProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'NonlinearityCorrectionProvider');

coefficientArray = featureControllerNonlinearityCorrectionProvider.readNonlinearityCoefficientsFromSpectrometer();

if (coefficientArray.length &gt; 1)
      error('instrument:oceanoptics:arrayNotSupported', 'Object array not supported.');    
end

driverData.Coefficients = coefficientArray(1);

set(deviceObj, 'DriverData', driverData);
returnValue = get(deviceObj, 'Coefficients');
</MCode>
               </Code>
               <Description>Reads the nonlinearity coefficients from the spectrometer. These values may be cached from when the coefficients were last read. 

Returns:
an array of Coefficients stored within the spectrometer and/or its channels.
</Description>
            </Method>
            <Method>
               <Name>setNonlinearityCoefficients</Name>
               <Location>nonlinearitycorrectionprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNonlinearityCoefficients(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.'));
end

featureControllerNonlinearityCorrectionProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'NonlinearityCorrectionProvider');

coefficientArray = javaArray('com.oceanoptics.omnidriver.spectrometer.Coefficients',1);
coefficientArray(1) = driverData.Coefficients;
featureControllerNonlinearityCorrectionProvider.setNonlinearityCoefficients(coefficientArray);

</MCode>
               </Code>
               <Description>Sets the non-linearity coefficients that the software will use for its calculations. These will be lost when the program exits unless they are subsequently written with writeNonlinearityCoefficientsToSpectrometer(). 

Parameters:
coefficients - Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>setNonlinearityCoefficientsSingleChannel</Name>
               <Location>nonlinearitycorrectionprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setNonlinearityCoefficientsSingleChannel(obj , spectrometerIndex, nonLinearities, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerNonlinearityCorrectionProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'NonlinearityCorrectionProvider');

featureControllerNonlinearityCorrectionProvider.setNonlinearityCoefficientsSingleChannel(nonLinearities, channelIndex);

</MCode>
               </Code>
               <Description>Updates the spectrometer's Coefficients with the new nonlinearity values. 

Parameters:
nonlinearities - an array of doubles containing the nonlinearity values.
channelIndex - 
</Description>
            </Method>
            <Method>
               <Name>writeNonlinearityCoefficientsToSpectrometer</Name>
               <Location>nonlinearitycorrectionprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function writeNonlinearityCoefficientsToSpectrometer(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.') ;
end

featureControllerNonlinearityCorrectionProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'NonlinearityCorrectionProvider');

coefficientArray = javaArray('com.oceanoptics.omnidriver.spectrometer.Coefficients',1);
coefficientArray(1) = driverData.Coefficients;
featureControllerNonlinearityCorrectionProvider.writeNonlinearityCoefficientsToSpectrometer(coefficientArray);

</MCode>
               </Code>
               <Description>Writes nonlinearity coefficients to the EEPROM in the spectrometer 

Parameters:
coefficients - Coefficients stored within the spectrometer. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>saturationthreshold</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SaturationThreshold1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getSaturationThreshold</Name>
               <Location>saturationthreshold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSaturationThreshold(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSaturationThreshold = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SaturationThreshold');

returnValue = featureControllerSaturationThreshold.getSaturationThreshold();

</MCode>
               </Code>
               <Description>Returns the saturation threshold that is used to "clip" spectra. This method will attempt to read the saturation threshold value out of the spectrometer's EEPROM the first time it is called. 

Returns:
(int) the saturation threshold, or maxIntensity if an IOException occurred.
</Description>
            </Method>
            <Method>
               <Name>setSaturationThreshold</Name>
               <Location>saturationthreshold</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setSaturationThreshold(obj , spectrometerIndex, saturationThreshold)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSaturationThreshold = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SaturationThreshold');

featureControllerSaturationThreshold.setSaturationThreshold(saturationThreshold);

</MCode>
               </Code>
               <Description>Sets the saturation threshold value. This will write the value to the spectrometer's EEPROM. 

Parameters:
key - (String) the secret code required to enable this method.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>singlestrobe</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SingleStrobe1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getSingleStrobeCountsToMicros</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSingleStrobeCountsToMicros(obj , spectrometerIndex, counts)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

returnValue = featureControllerSingleStrobe.getSingleStrobeCountsToMicros(counts);</MCode>
               </Code>
               <Description>Getter for the property countsToMicros. 

Parameters:
counts - Value to convert to micros. 
Returns:
the converted micro value
</Description>
            </Method>
            <Method>
               <Name>getSingleStrobeHigh</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSingleStrobeHigh(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

returnValue = featureControllerSingleStrobe.getSingleStrobeHigh();</MCode>
               </Code>
               <Description>Gets the Single Strobe High Clock Transition. 

Returns:
the single strobe high clock transition. 
</Description>
            </Method>
            <Method>
               <Name>getSingleStrobeIncrement</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSingleStrobeIncrement(obj , spectrometerIndex, magnitude)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

returnValue = featureControllerSingleStrobe.getSingleStrobeIncrement(magnitude);

</MCode>
               </Code>
               <Description>Getter for the final property SINGLE_STROBE_STEP. 

Returns:
the strobe clock step value.
</Description>
            </Method>
            <Method>
               <Name>getSingleStrobeLow</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSingleStrobeLow(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

returnValue = featureControllerSingleStrobe.getSingleStrobeLow();</MCode>
               </Code>
               <Description>Gets the Single Strobe Low Clock Transition. 

Returns:
the single strobe low clock transition. 
</Description>
            </Method>
            <Method>
               <Name>getSingleStrobeMaximum</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSingleStrobeMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

returnValue = featureControllerSingleStrobe.getSingleStrobeMaximum();

</MCode>
               </Code>
               <Description>Getter for the final property SINGLE_STROBE_MAX. 

Returns:
the strobe Maximum clock transition value.
</Description>
            </Method>
            <Method>
               <Name>getSingleStrobeMinimum</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSingleStrobeMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

returnValue = featureControllerSingleStrobe.getSingleStrobeMinimum();

</MCode>
               </Code>
               <Description>Getter for the final property SINGLE_STROBE_MIN. 

Returns:
the strobe minimum clock transition value.
</Description>
            </Method>
            <Method>
               <Name>setSingleStrobeHigh</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setSingleStrobeHigh(obj , spectrometerIndex, count)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

featureControllerSingleStrobe.setSingleStrobeHigh(count);</MCode>
               </Code>
               <Description>Tell the spectrometer how long to wait after the start of the integration period before turning the lamp on. 

Parameters:
counts - is the number of counts to delay after the start of the integration period before we turn the lamp on. Default value = 1, Minimum = 0, and Maximum = 0xFFFF (65535). 
</Description>
            </Method>
            <Method>
               <Name>setSingleStrobeLow</Name>
               <Location>singlestrobe</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setSingleStrobeLow(obj , spectrometerIndex, count)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSingleStrobe = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SingleStrobe');

featureControllerSingleStrobe.setSingleStrobeLow(count);</MCode>
               </Code>
               <Description>Tell the spectrometer how long to keep the lamp turned on. 

Parameters:
counts - is the duration in counts to keep the lamp turned on. Default value = 1, Minimum = 0, and Maximum = 0xFFFF (65535). 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>spectrumtype</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SpectrumType1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>setSpectrumType</Name>
               <Location>spectrumtype</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setSpectrumType(obj , spectrometerIndex, spectrumType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSpectrumType = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SpectrumType');

featureControllerSpectrumType.setSpectrumType(spectrumType);

</MCode>
               </Code>
               <Description>Parameters:
spectrumType - Allowed values: 
0 = normal 
1 = raw
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>spibus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="SPIBus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getSPIBytes</Name>
               <Location>spibus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSPIBytes(obj , spectrometerIndex, message, length)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerSPIBus = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'SPIBus');

returnValue = featureControllerSPIBus.getSPIBytes(message, length);

</MCode>
               </Code>
               <Description>Sends a packet of bytes over the SPI bus and read the result. The underlying command is expected to be OP_SPIREAD (0x62) for the HR4000, HR2000+, QE65000, USB2000 and similar. Note that the SPI bus clocks in a byte for every byte written. That is, if this sends out 10 bytes, then it also receives 10. It is up to the user to know what the device on the SPI bus expects. 

Parameters:
message - Sequence of bytes to send over the bus. Present implementation in Spectrometer limits SPI messages to 62 bytes (OP_SPIWRITE, length, and 62 message bytes for a total of 64). Bytes in excess may be ignored, depending on the implementation. 
Returns:
After writing to SPI, the spectrometer immediately reads from it. The resulting Byte array is returned. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>straylightcorrection</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="StrayLightCorrection1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getStrayLight</Name>
               <Location>straylightcorrection</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getStrayLight(obj , spectrometerIndex, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerStrayLightCorrection = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'StrayLightCorrection');

returnValue = featureControllerStrayLightCorrection.getStrayLight(index);

</MCode>
               </Code>
               <Description>Gets the stray light values stored in the spectrometer's Coefficients. 

Parameters:
index - the channel index. 
Returns:
an array of doubles containing the stray light values.
</Description>
            </Method>
            <Method>
               <Name>getStrayLightCorrectionCoefficient</Name>
               <Location>straylightcorrection</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getStrayLightCorrectionCoefficient(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerStrayLightCorrection = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'StrayLightCorrection');

coefficientArray = featureControllerStrayLightCorrection.getStrayLightCorrectionCoefficient();

if (coefficientArray.length &gt; 1)
      error('instrument:oceanoptics:arrayNotSupported', 'Object array not supported.');    
end

driverData.Coefficients = coefficientArray(1);
set(deviceObj, 'DriverData', driverData);
returnValue = get(deviceObj, 'Coefficients');


</MCode>
               </Code>
               <Description>Gets the stray light correction that the software will use for its calculations. These will be lost when the program exits unless they are subsequently written with writeStrayLightCoefficientToSpectrometer(). 

Returns:
Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>readStrayLightCorrectionCoefficientFromSpectrometer</Name>
               <Location>straylightcorrection</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = readStrayLightCorrectionCoefficientFromSpectrometer(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerStrayLightCorrection = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'StrayLightCorrection');

coefficientArray = featureControllerStrayLightCorrection.readStrayLightCorrectionCoefficientFromSpectrometer();

if (coefficientArray.length &gt; 1)
      error('instrument:oceanoptics:arrayNotSupported', 'Object array not supported.');    
end

driverData.Coefficients = coefficientArray(1);
set(deviceObj, 'DriverData', driverData);
returnValue = get(deviceObj, 'Coefficients');</MCode>
               </Code>
               <Description>Reads the stray light correction coefficient from the spectrometer. These values may be cached from when the coefficients were last read. 

Returns:
the Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>setStrayLight</Name>
               <Location>straylightcorrection</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setStrayLight(obj , spectrometerIndex, strayLight, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerStrayLightCorrection = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'StrayLightCorrection');

featureControllerStrayLightCorrection.setStrayLight(strayLight, index);

</MCode>
               </Code>
               <Description>Updates the spectrometer's Coefficients with the new stray light values. 

Parameters:
strayLight - an array of doubles containing the stray light values.
index - the channel index.
</Description>
            </Method>
            <Method>
               <Name>setStrayLightCorrectionCoefficient</Name>
               <Location>straylightcorrection</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setStrayLightCorrectionCoefficient(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.'));
end

featureControllerStrayLightCorrection = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'StrayLightCorrection');

coefficientArray = javaArray('com.oceanoptics.omnidriver.spectrometer.Coefficients',1);
coefficientArray(1) = driverData.Coefficients;
featureControllerStrayLightCorrection.setStrayLightCorrectionCoefficient(coefficientArray);</MCode>
               </Code>
               <Description>Sets the stray light correction that the software will use for its calculations. These will be lost when the program exits unless they are subsequently written with writeStrayLightCoefficientToSpectrometer(). 

Parameters:
coefficients - Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>writeStrayLightCoefficientToSpectrometer</Name>
               <Location>straylightcorrection</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function writeStrayLightCoefficientToSpectrometer(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.'));
end

featureControllerStrayLightCorrection = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'StrayLightCorrection');

coefficientArray = javaArray('com.oceanoptics.omnidriver.spectrometer.Coefficients',1);
coefficientArray(1) = driverData.Coefficients;
featureControllerStrayLightCorrection.writeStrayLightCoefficientToSpectrometer(coefficientArray);</MCode>
               </Code>
               <Description>Writes the stray light correction coefficient to the EEPROM in the spectrometer. 

Parameters:
coefficients - Coefficients stored within the spectrometer. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>stsbench</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="STSBench1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getFiberDiameter</Name>
               <Location>stsbench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getFiberDiameter(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

stsBenchObject = driverData.Wrapper.getSTSBench(spectrometerIndex);

if (isempty(stsBenchObject))
   error('STSBench object not returned. Either this feature is not supported by the connected device or an IO Exception occured.'); 
end

returnValue = char(stsBenchObject.getFiberDiameter());</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>getID</Name>
               <Location>stsbench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getID(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

stsBenchObject = driverData.Wrapper.getSTSBench(spectrometerIndex);

if (isempty(stsBenchObject))
   error('STSBench object not returned. Either this feature is not supported by the connected device or an IO Exception occured.'); 
end

returnValue = char(stsBenchObject.getID());</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>isDefined</Name>
               <Location>stsbench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isDefined(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

stsBenchObject = driverData.Wrapper.getSTSBench(spectrometerIndex);

if (isempty(stsBenchObject))
   error('STSBench object not returned. Either this feature is not supported by the connected device or an IO Exception occured.'); 
end

returnValue = stsBenchObject.isDefined();</MCode>
               </Code>
               <Description>The purpose of this method is to allow OmniDriver applications, written in other languages, to test whether this Bench object has been defined yet (and therefore will NOT return NULL references). The problem is that if any public method exposed in the Wrapper API returns a NULL, you will get a NullPointerException in the C/C++ layer. Currently, the STSBench class overrides this method. 

Overrides:
isDefined in class Bench
Returns:
true if all the fields of this Bench object have been loaded with non-null values.
</Description>
            </Method>
            <Method>
               <Name>setFiberDiameter</Name>
               <Location>stsbench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setFiberDiameter(obj , spectrometerIndex, fiberDiameter)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

stsBenchObject = driverData.Wrapper.getSTSBench(spectrometerIndex);

if (isempty(stsBenchObject))
   error('STSBench object not returned. Either this feature is not supported by the connected device or an IO Exception occured.'); 
end

stsBenchObject.setFiberDiameter(fiberDiameter);</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>setID</Name>
               <Location>stsbench</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setID(obj , spectrometerIndex, id)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

stsBenchObject = driverData.Wrapper.getSTSBench(spectrometerIndex);

if (isempty(stsBenchObject))
   error('STSBench object not returned. Either this feature is not supported by the connected device or an IO Exception occured.'); 
end

stsBenchObject.setID(id);</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>thermoelectric</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="ThermoElectric1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getDetectorSetPointCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDetectorSetPointCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getDetectorSetPointCelsius();

</MCode>
               </Code>
               <Description>Performs a read to the TEC controller to get the detector's TEC set point temperature. 

Returns:
The detector's TEC set point temperature.
</Description>
            </Method>
            <Method>
               <Name>getDetectorTemperatureCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDetectorTemperatureCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getDetectorTemperatureCelsius();

</MCode>
               </Code>
               <Description>Reads the temperature of the spectrometer detector. 

Returns:
Returns a double with the measured temperature in Celsius 
</Description>
            </Method>
            <Method>
               <Name>getDetectorTmperatureSetPointCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getDetectorTmperatureSetPointCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getDetectorTmperatureSetPointCelsius();

</MCode>
               </Code>
               <Description>Reads the temperature setpoint, in degrees Celsius, of the detector. 

Returns:
the temperature setpoint, in degrees Celsius, of the detector 
</Description>
            </Method>
            <Method>
               <Name>getFanEnable</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getFanEnable(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getFanEnable();

</MCode>
               </Code>
               <Description>Gets the state of the device fan. As this feature is not supported by the hardware, the state will be cached in the driver. The true state will not be known until setFanEnable() is called, so if this is called first, the result will be indeterminate (null). 

Returns:
Boolean containing true if the fan is powered on or false if it is not; can also return null when the state is not yet known.
</Description>
            </Method>
            <Method>
               <Name>getSaturationIntensity</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSaturationIntensity(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getSaturationIntensity();

</MCode>
               </Code>
               <Description>This function has nothing to do with TEC. But because the saturationIntensity value is stored in the same EEPROM slot as the TEC settings, it was convenient to piggy-back the saturation intensity feature onto the TEC feature. 

Returns:
-1 if this spectrometer does not support the saturationIntensity feature.</Description>
            </Method>
            <Method>
               <Name>getSetPointIncrementCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSetPointIncrementCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getSetPointIncrementCelsius();

</MCode>
               </Code>
               <Description>Getter for the final property SETPOINT_INCREMENT. 

Returns:
the increment set point in Celsius.
</Description>
            </Method>
            <Method>
               <Name>getSetPointMaximumCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSetPointMaximumCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getSetPointMaximumCelsius();

</MCode>
               </Code>
               <Description>Getter for the final property SETPOINT_MAX_DEGREES. 

Returns:
the maximum set point in Celsius.
</Description>
            </Method>
            <Method>
               <Name>getSetPointMinimumCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSetPointMinimumCelsius(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getSetPointMinimumCelsius();

</MCode>
               </Code>
               <Description>Getter for the final property SETPOINT_MIN_DEGREES. 

Returns:
the minimum set point in Celsius.
</Description>
            </Method>
            <Method>
               <Name>getTECEnable</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getTECEnable(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.getTECEnable();

</MCode>
               </Code>
               <Description>Identifies whether the detector's TEC controller is enabled or disabled. 

Returns:
1 if TEC is enabled, 0 if not (or an error occurred).
</Description>
            </Method>
            <Method>
               <Name>isSaveTECStateEnabled</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isSaveTECStateEnabled(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.isSaveTECStateEnabled();

</MCode>
               </Code>
               <Description>The QE65000 allows users to save the last state of the TEC state, Fan state, and setpoint. The QE65000 will return true. All others will return false, disallowing the ability to saveTECState() 

Returns:
true if saving the TEC state is enabled, false otherwise.
</Description>
            </Method>
            <Method>
               <Name>saveTECState</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function saveTECState(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

featureControllerThermoElectric.saveTECState();

</MCode>
               </Code>
               <Description>The QE65000 allows users to save the last state of the TEC state, Fan state, and setpoint. Calling isSaveTECStateEnabled will return true if using a QE65000. All other spectrometers will return false, disallowing the ability to saveTECState() </Description>
            </Method>
            <Method>
               <Name>setDetectorSetPointCelsius</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setDetectorSetPointCelsius(obj , spectrometerIndex, point)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

featureControllerThermoElectric.setDetectorSetPointCelsius(point);

</MCode>
               </Code>
               <Description>Performs a write command to the TEC controller. This command is used to set the detector's TEC set point temperature. The set-point value is a signed 16-bit value that is expressed in tenths of a degree Celsius. For example to set the temperature to -5.0 C a value of -50 or 0xFFCD is sent. 

Parameters:
point - the value to set the detectors TEC set point temperature. 
</Description>
            </Method>
            <Method>
               <Name>setFanEnable</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setFanEnable(obj , spectrometerIndex, enabled)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

featureControllerThermoElectric.setFanEnable(enabled);

</MCode>
               </Code>
               <Description>Sets the power state for the device fan. The underlying command is expected to be OP_FANON (0x0D) for the NIRs. 

Parameters:
enable - true will power the fan, false will shut it down 
</Description>
            </Method>
            <Method>
               <Name>setSaturationIntensity</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setSaturationIntensity(obj , spectrometerIndex, saturationIntensity, key)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

returnValue = featureControllerThermoElectric.setSaturationIntensity(saturationIntensity, key);

</MCode>
               </Code>
               <Description>This function has nothing to do with TEC. But because the saturationIntensity value is stored in the same EEPROM slot as the TEC settings, it was convenient to piggy-back the saturation intensity feature onto the TEC feature. 

Returns:
true if successful, else return false if this spectrometer does not support the saturationIntensity feature.
</Description>
            </Method>
            <Method>
               <Name>setTECEnable</Name>
               <Location>thermoelectric</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setTECEnable(obj , spectrometerIndex, enabled)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerThermoElectric = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'ThermoElectric');

featureControllerThermoElectric.setTECEnable(enabled);

</MCode>
               </Code>
               <Description>Enables/Disables the detector's TEC controller. 

Parameters:
enable - the set value of the detector's TEC controller. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>utility</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getFeatureController</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function featureController = getFeatureController(obj, spectrometerIndex, featureName)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

featureController = [];
isFeatureSupported = invoke(obj, 'isFeatureSupported', spectrometerIndex, featureName);

if (isFeatureSupported == 0)
    error('instrument:oceanoptics:featureNotSupported', sprintf('Feature %s not supported by the connected device', featureName));
end

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

featureController = eval(['driverData.Wrapper.getFeatureController' featureName '(' num2str(spectrometerIndex) ')']);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
featureName - name of the desired interface
Returns:
an object which provides the desired interface, or null if this feature is not available for this spectrometer.
</Description>
            </Method>
            <Method>
               <Name>isFeatureSupported</Name>
               <Location>utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function isSupported = isFeatureSupported(obj, spectrometerIndex, featureName)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

try
    isSupported = eval(['driverData.Wrapper.isFeatureSupported' featureName '(' num2str(spectrometerIndex) ')']);
catch aException
    error('instrument:oceanoptics:invalidSyntax', 'No appropriate method, property, or field. Please check the featureName(case sensitive) and/or the spectrometer index.');
end</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
featureName - name of the desired interface
Returns:
returns true if the desired interface is supported by the device</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>uvvislightsource</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="UVVISLightSource1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getLampIntensityIncrement</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLampIntensityIncrement(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.getLampIntensityIncrement();

</MCode>
               </Code>
               <Description>Getter for the final property INTENSITY_STEP. 

Returns:
the step intensity value for the lamp.
</Description>
            </Method>
            <Method>
               <Name>getLampIntensityMaximum</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLampIntensityMaximum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.getLampIntensityMaximum();

</MCode>
               </Code>
               <Description>Getter for the final property MAX_INTENSITY. 

Returns:
the maximum intensity value for the lamp.
</Description>
            </Method>
            <Method>
               <Name>getLampIntensityMinimum</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getLampIntensityMinimum(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.getLampIntensityMinimum();

</MCode>
               </Code>
               <Description>Getter for the final property MIN_INTENSITY. 

Returns:
the minimum intensity value for the lamp.
</Description>
            </Method>
            <Method>
               <Name>getPOTValues</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getPOTValues(obj , spectrometerIndex, var)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.getPOTValues(var);

</MCode>
               </Code>
               <Description>Returns the values of all 4 digitally controlled potentiometers. 

Returns:
byte[] the potentiometers values. 
</Description>
            </Method>
            <Method>
               <Name>getUVLampIntensity</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getUVLampIntensity(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.getUVLampIntensity();

</MCode>
               </Code>
               <Description>Returns the intensity of the D2 lamp. 0x0 = low (not off), 0x3f = high 

Returns:
the intensity of the D2 lamp. 
</Description>
            </Method>
            <Method>
               <Name>getVisLampIntensity</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getVisLampIntensity(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.getVisLampIntensity();

</MCode>
               </Code>
               <Description>Returns the intensity of the Visible lamp. 0x0 = low (not off), 0x3f = high 

Returns:
the intensity of the visible lamp. 
</Description>
            </Method>
            <Method>
               <Name>isLampOn</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isLampOn(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.isLampOn();

</MCode>
               </Code>
               <Description>Checks the state of both Lamps (Visible and the D2 lamp). 

Returns:
the state for the lamps (true:On, false:Off). 
</Description>
            </Method>
            <Method>
               <Name>isVisLampOn</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isVisLampOn(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

returnValue = featureControllerUVVIsLightSource.isVisLampOn();

</MCode>
               </Code>
               <Description>Checks the state of the Visible lamp. 

Returns:
the state for the lamp (true:On, false:Off). 
</Description>
            </Method>
            <Method>
               <Name>setLampOn</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setLampOn(obj , spectrometerIndex, lampOn)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

featureControllerUVVIsLightSource.setLampOn(lampOn);

</MCode>
               </Code>
               <Description>Turns on/off both Lamps (Visible and the D2 lamp). This is the only way to turn the both lamps completely off. It also Enables/Disables the Fan. The Potentiometer values are retained in this state. 

Parameters:
lampOn - 
</Description>
            </Method>
            <Method>
               <Name>setPOTValue</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setPOTValue(obj , spectrometerIndex, pot, value)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

featureControllerUVVIsLightSource.setPOTValue(pot, value);

</MCode>
               </Code>
               <Description>Sets the specified potentiometer to the desired value. 

Parameters:
pot - the potentiometer number.
value - the value to set the potentiometer. 
</Description>
            </Method>
            <Method>
               <Name>setPowerUpPOTValues</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setPowerUpPOTValues(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

featureControllerUVVIsLightSource.setPowerUpPOTValues();

</MCode>
               </Code>
               <Description>Transfers the current potentiometer values to nonvolatile memory for recall upon power up. </Description>
            </Method>
            <Method>
               <Name>setUVLampIntensity</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setUVLampIntensity(obj , spectrometerIndex, intens)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

featureControllerUVVIsLightSource.setUVLampIntensity(intens);

</MCode>
               </Code>
               <Description>Controls the intensity of the D2 lamp. 0x0 = low (not off), 0x3f = high 

Parameters:
intens - 
</Description>
            </Method>
            <Method>
               <Name>setVisLampIntensity</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setVisLampIntensity(obj , spectrometerIndex, intens)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

featureControllerUVVIsLightSource.setVisLampIntensity(intens);

</MCode>
               </Code>
               <Description>Controls the intensity of the Visible lamp. 0x0 = low (not off), 0x3f = high 

Parameters:
intens - 
</Description>
            </Method>
            <Method>
               <Name>setVisLampOn</Name>
               <Location>uvvislightsource</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setVisLampOn(obj , spectrometerIndex, lampOn)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerUVVIsLightSource = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, '_UV_VIS_LightSource');

featureControllerUVVIsLightSource.setVisLampOn(lampOn);

</MCode>
               </Code>
               <Description>Controls the state of the Visible lamp. 

Parameters:
lampOn - 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>version</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Version1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getFirmwareVersion</Name>
               <Location>version</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getFirmwareVersion(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerVersion = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Version');

returnValue = char(featureControllerVersion.getFirmwareVersion());

</MCode>
               </Code>
               <Description>Returns the FX2 firmware version as a string. 

Returns:
the FX2 firmware version as a string (e.g. " HR2000+ 3.30.0") 
</Description>
            </Method>
            <Method>
               <Name>isAdvancedVersion</Name>
               <Location>version</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isAdvancedVersion(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerVersion = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'Version');

returnValue = featureControllerVersion.isAdvancedVersion();

</MCode>
               </Code>
               <Description>Predicate denoting whether or not this is an instance of AdvancedVersion. 

Returns:
true if this is an instance of AdvancedVersion; false otherwise.
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>wavelengthcalibrationprovider</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WavelengthCalibrationProvider1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getWavelengthCalibrationCoefficients</Name>
               <Location>wavelengthcalibrationprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWavelengthCalibrationCoefficients(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerWavelengthCalibrationProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'WavelengthCalibrationProvider');

coefficientArray = featureControllerWavelengthCalibrationProvider.getWavelengthCalibrationCoefficients();

if (coefficientArray.length &gt; 1)
      error('instrument:oceanoptics:arrayNotSupported', 'Object array not supported');    
end

driverData.Coefficients = coefficientArray(1);
set(deviceObj, 'DriverData', driverData);
returnValue = get(deviceObj, 'Coefficients');</MCode>
               </Code>
               <Description>Gets the wavelength calibration coefficients that the software will use for its calculations. These will be lost when the program exits unless they are subsequently written with setCoefficientsToSpectrometer(). 

Returns:
Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>getWavelengths</Name>
               <Location>wavelengthcalibrationprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getWavelengths(obj , spectrometerIndex, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerWavelengthCalibrationProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'WavelengthCalibrationProvider');

returnValue = featureControllerWavelengthCalibrationProvider.getWavelengths(index);

</MCode>
               </Code>
               <Description>Gets the wavelength values stored in the spectrometer's Coefficients. 

Parameters:
index - the channel index. 
Returns:
an array of doubles containing the wavelength values.
</Description>
            </Method>
            <Method>
               <Name>readWavelengthCalibrationCoefficientsFromSpectrometer</Name>
               <Location>wavelengthcalibrationprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = readWavelengthCalibrationCoefficientsFromSpectrometer(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerWavelengthCalibrationProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'WavelengthCalibrationProvider');

coefficientArray = featureControllerWavelengthCalibrationProvider.readWavelengthCalibrationCoefficientsFromSpectrometer();

if (coefficientArray.length &gt; 1)
      error('instrument:oceanoptics:arrayNotSupported', 'Object array not supported');    
end

driverData.Coefficients = coefficientArray(1);
set(deviceObj, 'DriverData', driverData);
returnValue = get(deviceObj, 'Coefficients');
</MCode>
               </Code>
               <Description>Gets the wavelength coefficients from the spectrometer. These values may be cached from when the coefficients were last read. 

Returns:
Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>setWavelengthCalibrationCoefficients</Name>
               <Location>wavelengthcalibrationprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWavelengthCalibrationCoefficients(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.'));
end

featureControllerWavelengthCalibrationProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'WavelengthCalibrationProvider');

coefficientArray = javaArray('com.oceanoptics.omnidriver.spectrometer.Coefficients',1);
coefficientArray(1) = driverData.Coefficients;
featureControllerWavelengthCalibrationProvider.setWavelengthCalibrationCoefficients(coefficientArray);
</MCode>
               </Code>
               <Description>Sets the wavelength calibration coefficients that the software will use for its calculations. These will be lost when the program exits unless they are subsequently written with setCoefficientsToSpectrometer(). 

Parameters:
coefficients - Coefficients stored within the spectrometer.
</Description>
            </Method>
            <Method>
               <Name>setWavelengths</Name>
               <Location>wavelengthcalibrationprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setWavelengths(obj , spectrometerIndex, wavelengths, index)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerWavelengthCalibrationProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'WavelengthCalibrationProvider');

featureControllerWavelengthCalibrationProvider.setWavelengths(wavelengths, index);

</MCode>
               </Code>
               <Description>Updates the spectrometer's Coefficients with the new wavelength values. 

Parameters:
wavelengths - an array of doubles containing the wavelength values.
index - the channel index.
</Description>
            </Method>
            <Method>
               <Name>writeWavelengthCoefficientsToSpectrometer</Name>
               <Location>wavelengthcalibrationprovider</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function writeWavelengthCoefficientsToSpectrometer(obj , spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.

deviceObj = get(obj, 'Parent');
driverData = get(deviceObj, 'DriverData');

utilityAccessor = get(deviceObj, 'Utility');

featureControllerWavelengthCalibrationProvider = invoke(utilityAccessor, 'getFeatureController', spectrometerIndex, 'WavelengthCalibrationProvider');

if (isempty(driverData.Coefficients))
    error('instrument:oceanoptics:invalidObject', sprintf('Invalid Object: %s object not created. %s', 'Coefficients', 'Coefficients need to be created before trying to set them or access. Please refer to help regarding the usage of this method.') ;
end

coefficientArray = javaArray('com.oceanoptics.omnidriver.spectrometer.Coefficients',1);
coefficientArray(1) = driverData.Coefficients;
featureControllerWavelengthCalibrationProvider.writeWavelengthCoefficientsToSpectrometer(coefficientArray);</MCode>
               </Code>
               <Description>Writes wavelength coefficients to the EEPROM in the spectrometer 

Parameters:
coefficients - Coefficients stored within the spectrometer. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>wrapperextensions</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="WrapperExtensions1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>demonstrateArcoptixSpectrometer</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function demonstrateArcoptixSpectrometer(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

wrapperExtensionObject.demonstrateArcoptixSpectrometer();</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>disableRawSpectrumMode</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disableRawSpectrumMode(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

wrapperExtensionObject.disableRawSpectrumMode();
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>enableRawSpectrumMode</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = enableRawSpectrumMode(obj)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.enableRawSpectrumMode();
</MCode>
               </Code>
               <Description>When "raw-spectrum" mode is selected, wrapper.getSpectrum() will return spectra with the following characteristics: 
1. No boxcar averaging. 
2. No scans-to-average. Will assume "1". 
3. No bad-pixel removal. 
4. No interpolation. All pixels from the detector will be returned. 
5. Will not subtract out a dark spectrum even if you have specfied a dark. Must call insertKey() before calling this method. 

Returns:
true if the operation was successful.
</Description>
            </Method>
            <Method>
               <Name>getBadPixels</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getBadPixels(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.getBadPixels(spectrometerIndex);
</MCode>
               </Code>
               <Description>This function is only available to Ocean Optics manufacturing. You must call insertKey() before using this method. 

Parameters:
spectrometerIndex - 
Returns:
int[] an array of indices of bad pixels. If there are no bad pixels, we will return an array with zero elements. We will never return null. If a zero-length array is returned by this method, you should always call getLastException() to see of an error occurred.
</Description>
            </Method>
            <Method>
               <Name>getI2CBytes</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getI2CBytes(obj, i2cbus, address, numBytes)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.getI2CBytes(i2cbus, address, numBytes);
</MCode>
               </Code>
               <Description>This method simply "wraps" the I2CBus.getI2CBytes() method and catches any exceptions that may be thrown. 
You can view the exception by calling wrapper.getLastException() 

Parameters:
i2cbus - -- (input) the I2CBus object returned by wrapper.getFeatureControllerI2CBus()
address - 
numBytes - 
Returns:
array of byte's containing the data read from the device. If an error occurred, it will return a single element array containing a "-1".

</Description>
            </Method>
            <Method>
               <Name>getNumberOfChannels</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfChannels(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.getNumberOfChannels(spectrometerIndex);
</MCode>
               </Code>
               <Description>Returns:
total number of channels available on this spectrometer, including both enabled and disabled channels.
</Description>
            </Method>
            <Method>
               <Name>getNumberOfEnabledChannels</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getNumberOfEnabledChannels(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.getNumberOfEnabledChannels(spectrometerIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
int the number channels enabled for this spectrometer. Most spectrometers will have only 1 enabled channel. The ADC1000-USB may have several enabled channels.
</Description>
            </Method>
            <Method>
               <Name>getSaturationIntensity</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = getSaturationIntensity(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.getSaturationIntensity(spectrometerIndex);
</MCode>
               </Code>
               <Description>Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
the saturation threshold value for this spectrometer. Will return -1 if this spectrometer does not support this feature.
</Description>
            </Method>
            <Method>
               <Name>isChannelEnabled</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isChannelEnabled(obj, spectrometerIndex, channelIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.isChannelEnabled(spectrometerIndex, channelIndex);
</MCode>
               </Code>
               <Description>Parameters:
channelIndex - a simple integer value 0-n (not a bitmask value) 
Returns:
boolean true or false
</Description>
            </Method>
            <Method>
               <Name>isSpectrumValid</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = isSpectrumValid(obj, spectrometerIndex)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.isSpectrumValid(spectrometerIndex);
</MCode>
               </Code>
               <Description>You must first call thet getSpectrum() method before calling this method for the same spectrometer. 
After calling getSpectrum(), you can call this method to determine if the most recently acquired spectrum is valid. Things which could result in an "invalid" spectrum are I/O errors, or physically unplugging the spectrometer. Be careful to specify the same spectrometerIndex value for both calls! 

Parameters:
spectrometerIndex - (0-n) of desired spectrometer in our collection of attached spectrometers. 
Returns:
true if the most recently acquired spectrum is valid.
</Description>
            </Method>
            <Method>
               <Name>openRemoteSpectrometer</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = openRemoteSpectrometer(obj, deviceAddress, deviceType, busType)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.openRemoteSpectrometer(deviceAddress, deviceType, busType);
</MCode>
               </Code>
               <Description>Call this method once for each JazNetwork device you wish to open. 
If you call this method twice for the same spectrometer/ipAddress, we will simply return the spectrometerIndex position of the existing opened spectrometer. 

Parameters:
deviceAddress - an IP address like "192.168.21.1"
deviceType - either "Jaz-(Network)" or "Remora"
busType - currently only "internet" is supported 
Returns:
int the spectrometerIndex position of the newly opened spectrometer. If we were unable to open the specified network spectrometer, we will return -1, indicating an error.
</Description>
            </Method>
            <Method>
               <Name>setBadPixels</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setBadPixels(obj, spectrometerIndex, badPixelArray)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.setBadPixels(spectrometerIndex, badPixelArray);
</MCode>
               </Code>
               <Description>This method will over-write any prior bad-pixel information in the spectrometer. You must call insertKey() before using this method. 

Parameters:
badPixelArray - an array of short's which are zero-based indices of the bad pixels. 
Returns:
true if successful, else return false
</Description>
            </Method>
            <Method>
               <Name>setI2CBytes</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setI2CBytes(obj, i2cbus, address, numBytes, i2C)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.setI2CBytes(i2cbus, address, numBytes, i2C);
</MCode>
               </Code>
               <Description>This method simply "wraps" the I2CBus.setI2CBytes() method and catches any exceptions that may be thrown. 
You can view the exception by calling wrapper.getLastException() 

Parameters:
i2cbus - -- (input) the I2CBus object returned by wrapper.getFeatureControllerI2CBus()
address - 
numBytes - -- number of bytes to send
i2C - -- byte[] array (unsigned 8-bit elements) of bytes to send 
Returns:
"1" if successful, "0" if an I/O Exception occurred
</Description>
            </Method>
            <Method>
               <Name>setSaturationIntensity</Name>
               <Location>wrapperextensions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function returnValue = setSaturationIntensity(obj, spectrometerIndex, saturationIntensity)
% For group functions, OBJ is the group object. For
% base device functions, OBJ is the device object.
deviceObj = get(obj, 'Parent');

driverData = get(deviceObj, 'DriverData');

wrapperExtensionObject = driverData.Wrapper.getWrapperExtensions();

returnValue = wrapperExtensionObject.setSaturationIntensity(spectrometerIndex, saturationIntensity);
</MCode>
               </Code>
               <Description>You must first call the insertKey() method to enable this function. Use of this function is restricted to Ocean Optics manufacturing. 

Returns:
true if the operation was successful, else return false. 
The operation may fail for the following reasons: 

•You did not first call insertKey() with the proper key string 
•The spectrometer does not support the saturationIntensity feature. 
</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>